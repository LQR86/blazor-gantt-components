name: Specialized CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    # This workflow handles specialized branch types

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: 'GanttComponents'

jobs:
  # Branch type detection for specialized workflows
  branch-routing:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      is-milestone: ${{ steps.detect.outputs.is-milestone }}
      is-ci-branch: ${{ steps.detect.outputs.is-ci-branch }}
      is-perf-branch: ${{ steps.detect.outputs.is-perf-branch }}
    steps:
      - name: Detect Specialized Branch Types
        id: detect
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "üîç Analyzing branch type: $BRANCH_NAME"
          
          # Detect milestone feature branches
          if [[ "$BRANCH_NAME" =~ ^feat/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "is-milestone=true" >> $GITHUB_OUTPUT
            echo "is-ci-branch=false" >> $GITHUB_OUTPUT
            echo "is-perf-branch=false" >> $GITHUB_OUTPUT
            echo "üéØ Milestone feature branch detected - full CI/CD pipeline required"
          # Detect CI/CD branches
          elif [[ "$BRANCH_NAME" =~ ^ci/ ]]; then
            echo "is-milestone=false" >> $GITHUB_OUTPUT
            echo "is-ci-branch=true" >> $GITHUB_OUTPUT
            echo "is-perf-branch=false" >> $GITHUB_OUTPUT
            echo "üîÑ CI/CD branch detected - testing workflow changes"
          # Detect performance branches
          elif [[ "$BRANCH_NAME" =~ ^perf/ ]]; then
            echo "is-milestone=false" >> $GITHUB_OUTPUT
            echo "is-ci-branch=false" >> $GITHUB_OUTPUT
            echo "is-perf-branch=true" >> $GITHUB_OUTPUT
            echo "‚ö° Performance branch detected - benchmarking required"
          else
            echo "is-milestone=false" >> $GITHUB_OUTPUT
            echo "is-ci-branch=false" >> $GITHUB_OUTPUT
            echo "is-perf-branch=false" >> $GITHUB_OUTPUT
            echo "üìù Standard branch - using default CI/CD"
          fi

  # Milestone-specific CI/CD with enhanced validation
  milestone-cicd:
    runs-on: windows-latest  # Windows-focused for Win 7/10 compatibility
    needs: branch-routing
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && (
        needs.branch-routing.outputs.is-milestone == 'true' ||
        needs.branch-routing.outputs.is-ci-branch == 'true' ||
        needs.branch-routing.outputs.is-perf-branch == 'true'
      ))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~\.nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal
    
    - name: Publish for Windows 7/10
      run: |
        dotnet publish --configuration Release --output .\publish\win-x64 --runtime win-x64 --self-contained false
        dotnet publish --configuration Release --output .\publish\win-x86 --runtime win-x86 --self-contained false
    
    - name: Upload Windows x64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-x64-build
        path: .\publish\win-x64\
        retention-days: 30
    
    - name: Upload Windows x86 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-x86-build
        path: .\publish\win-x86\
        retention-days: 30

  # Basic code analysis
  code-analysis:
    runs-on: windows-latest
    needs: milestone-cicd
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build for analysis
      run: dotnet build --configuration Release

  # Security scan - basic package vulnerability check
  security-scan:
    runs-on: windows-latest
    needs: milestone-cicd
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Check for vulnerable packages
      run: |
        dotnet restore
        dotnet list package --vulnerable --include-transitive
        if ($LASTEXITCODE -ne 0) { 
          Write-Host "‚ö†Ô∏è Vulnerable packages found"
        } else {
          Write-Host "‚úÖ No vulnerable packages found"
        }
