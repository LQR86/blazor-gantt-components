@page "/timeline-header-demo"
@using GanttComponents.Components.TimelineView
@using GanttComponents.Components.TimelineZoomControls
@using GanttComponents.Models
@using GanttComponents.Services
@inject IGanttTaskService TaskService
@inject IUniversalLogger Logger
@inject IGanttI18N I18N

<PageTitle>Timeline Header Template Demo</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-12">
            <h1 class="h4 mb-3">üéØ Timeline Header Template Demo</h1>
            <p class="text-muted mb-4">
                Experience the new preset header template system. Each zoom level now uses 
                carefully crafted preset templates for consistent, predictable header formatting.
            </p>
        </div>
    </div>

    <!-- Template Info Display -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">üìã Current Template Details</h5>
                </div>
                <div class="card-body">
                    @if (CurrentTemplate != null)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <strong>Zoom Level:</strong> @CurrentZoomLevel (@($"{(int)CurrentZoomLevel}px per day"))<br />
                                    <strong>Description:</strong> @CurrentTemplate.Description
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <strong>Primary Header:</strong><br />
                                        Unit: @CurrentTemplate.PrimaryUnit<br />
                                        Format: @CurrentTemplate.PrimaryFormat<br />
                                        Visible: @(CurrentTemplate.ShowPrimary ? "‚úÖ" : "‚ùå")
                                    </div>
                                    <div class="col-6">
                                        <strong>Secondary Header:</strong><br />
                                        Unit: @CurrentTemplate.SecondaryUnit<br />
                                        Format: @CurrentTemplate.SecondaryFormat<br />
                                        Visible: @(CurrentTemplate.ShowSecondary ? "‚úÖ" : "‚ùå")
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="badge bg-primary mb-2">Template-Based Headers</div>
                                <p class="text-muted mb-0">
                                    This demo uses the new preset template system instead of dynamic calculations. 
                                    Each zoom level has a predefined template optimized for its specific pixel density.
                                </p>
                                <div class="mt-3">
                                    <small class="text-success">
                                        ‚úÖ Predictable behavior<br />
                                        ‚úÖ Optimized performance<br />
                                        ‚úÖ Comprehensive testing
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Zoom Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">üîç Zoom Level Controls</h5>
                </div>
                <div class="card-body">
                    <TimelineZoomControls CurrentZoomLevel="@CurrentZoomLevel"
                                        CurrentZoomFactor="@CurrentZoomFactor"
                                        OnZoomLevelChanged="@HandleZoomLevelChanged"
                                        OnZoomFactorChanged="@HandleZoomFactorChanged" />
                </div>
            </div>
        </div>
    </div>

    <!-- Timeline Display -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">üìÖ Timeline with Template-Based Headers</h5>
                </div>
                <div class="card-body">
                    <div style="height: 400px; overflow: auto; border: 1px solid #dee2e6; border-radius: 0.375rem;">
                        <TimelineView Tasks="@DemoTasks"
                                    ZoomLevel="@CurrentZoomLevel"
                                    ZoomFactor="@CurrentZoomFactor"
                                    OnTaskSelected="@HandleTaskSelected"
                                    RowHeight="32"
                                    HeaderMonthHeight="32"
                                    HeaderDayHeight="24" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Template Comparison Table -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">üìä All Header Templates Overview</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>Zoom Level</th>
                                    <th>Day Width</th>
                                    <th>Primary Unit</th>
                                    <th>Primary Format</th>
                                    <th>Secondary Unit</th>
                                    <th>Secondary Format</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var zoomLevel in Enum.GetValues<TimelineZoomLevel>())
                                {
                                    var template = TimelineHeaderTemplateService.GetTemplate(zoomLevel);
                                    var isCurrentLevel = zoomLevel == CurrentZoomLevel;
                                    <tr class="@(isCurrentLevel ? "table-primary" : "")">
                                        <td>
                                            @if (isCurrentLevel) { <strong>@zoomLevel</strong> } else { @zoomLevel }
                                        </td>
                                        <td>@($"{(int)zoomLevel}px")</td>
                                        <td>@template.PrimaryUnit</td>
                                        <td><code>@template.PrimaryFormat</code></td>
                                        <td>@template.SecondaryUnit</td>
                                        <td><code>@template.SecondaryFormat</code></td>
                                        <td>@template.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Timeline Properties
    private TimelineZoomLevel CurrentZoomLevel = TimelineZoomLevel.MonthWeekOptimal50px;
    private double CurrentZoomFactor = 1.0;
    private DateTime TimelineStartDate = DateTime.Today.AddDays(-30);
    private DateTime TimelineEndDate = DateTime.Today.AddDays(60);
    
    // Current Template
    private TimelineHeaderTemplate? CurrentTemplate = null;
    
    // Demo Data
    private List<GanttTask> DemoTasks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDemoTasks();
        LoadCurrentTemplate();
    }

    private async Task LoadDemoTasks()
    {
        try
        {
            // Use proper service layer instead of direct DbContext access
            DemoTasks = await TaskService.GetAllTasksAsync();
            
            // If no tasks exist, create some demo tasks
            if (!DemoTasks.Any())
            {
                DemoTasks = CreateDemoTasks();
            }
            
            // Adjust timeline dates to encompass all tasks
            if (DemoTasks.Any())
            {
                var earliestStart = DemoTasks.Min(t => t.StartDate);
                var latestEnd = DemoTasks.Max(t => t.EndDate);
                
                TimelineStartDate = earliestStart.AddDays(-7);
                TimelineEndDate = latestEnd.AddDays(7);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Failed to load demo tasks via TaskService", ex);
            DemoTasks = CreateDemoTasks();
        }
    }

    private List<GanttTask> CreateDemoTasks()
    {
        var today = DateTime.Today;
        return new List<GanttTask>
        {
            new GanttTask
            {
                Id = 1,
                Name = "Header Template Demo Project",
                StartDate = today.AddDays(-10),
                EndDate = today.AddDays(50),
                Duration = "60d",
                TaskType = TaskType.FixedDuration,
                WbsCode = "1"
            },
            new GanttTask
            {
                Id = 2,
                Name = "Phase 1: Planning",
                StartDate = today.AddDays(-10),
                EndDate = today.AddDays(5),
                Duration = "15d",
                TaskType = TaskType.FixedDuration,
                WbsCode = "1.1"
            },
            new GanttTask
            {
                Id = 3,
                Name = "Phase 2: Development",
                StartDate = today.AddDays(6),
                EndDate = today.AddDays(30),
                Duration = "24d",
                TaskType = TaskType.FixedDuration,
                WbsCode = "1.2"
            },
            new GanttTask
            {
                Id = 4,
                Name = "Phase 3: Testing",
                StartDate = today.AddDays(31),
                EndDate = today.AddDays(45),
                Duration = "14d",
                TaskType = TaskType.FixedDuration,
                WbsCode = "1.3"
            },
            new GanttTask
            {
                Id = 5,
                Name = "Phase 4: Deployment",
                StartDate = today.AddDays(46),
                EndDate = today.AddDays(50),
                Duration = "4d",
                TaskType = TaskType.FixedDuration,
                WbsCode = "1.4"
            }
        };
    }

    private void LoadCurrentTemplate()
    {
        CurrentTemplate = TimelineHeaderTemplateService.GetTemplate(CurrentZoomLevel);
        StateHasChanged();
    }

    private void HandleZoomLevelChanged(TimelineZoomLevel newZoomLevel)
    {
        CurrentZoomLevel = newZoomLevel;
        LoadCurrentTemplate();
        Logger.LogDebugInfo($"üîç Zoom level changed to {newZoomLevel} - using preset template");
    }

    private void HandleZoomFactorChanged(double newZoomFactor)
    {
        CurrentZoomFactor = newZoomFactor;
        Logger.LogDebugInfo($"üîç Zoom factor changed to {newZoomFactor}x");
    }

    private void HandleTaskSelected(int taskId)
    {
        Logger.LogDebugInfo($"üìã Task selected: ID {taskId}");
    }
}
