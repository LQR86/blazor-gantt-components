name: Version Management
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write  # Required for creating tags
  pull-requests: read

jobs:
  pr-title-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Validate PR Title Format
        run: |
          echo "🔍 Validating PR title format for branch: ${{ github.head_ref }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Check if this is a milestone feature branch
          if [[ "$BRANCH_NAME" =~ ^feat/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "📋 Milestone feature branch detected - version tag required in PR title"
            
            # Extract version from branch name (including alpha/beta suffixes)
            EXPECTED_VERSION=$(echo "$BRANCH_NAME" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*-[^-]*' | head -1)
            if [[ -z "$EXPECTED_VERSION" ]]; then
              EXPECTED_VERSION=$(echo "$BRANCH_NAME" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*')
            fi
            
            # Check if PR title contains the version tag
            if [[ "$PR_TITLE" =~ \($EXPECTED_VERSION\) ]]; then
              echo "✅ PR title correctly includes version tag: $EXPECTED_VERSION"
            else
              echo "❌ PR title must include version tag for milestone branch"
              echo "   Current title: $PR_TITLE"
              echo "   Required format: feat: Complete Component Name ($EXPECTED_VERSION)"
              echo "   Example: feat: Complete GanttComposer Component ($EXPECTED_VERSION)"
              exit 1
            fi
          else
            echo "📋 Non-milestone branch detected - no version tag required"
            
            # Check that non-milestone branches don't have version tags
            if [[ "$PR_TITLE" =~ \(v[0-9]+\.[0-9]+\.[0-9]+[^)]*\) ]]; then
              echo "❌ Non-milestone PR title should NOT include version tag"
              echo "   Current title: $PR_TITLE"
              echo "   Branch type: $BRANCH_NAME"
              echo "   Correct format: fix: description of fix"
              exit 1
            else
              echo "✅ PR title correctly excludes version tag for non-milestone branch"
            fi
          fi

  version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check Version Update Required
        id: version-check
        run: |
          # Get current version from version.json
          CURRENT_VERSION=$(jq -r '.version' version.json)
          CURRENT_MILESTONE=$(jq -r '.milestone' version.json)
          
          # Check if this is a milestone PR (feature/ branch with milestone change)
          if [[ "${{ github.head_ref }}" =~ ^feat/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Milestone PR detected"
            # Extract expected version from branch name (including alpha/beta suffixes)
            EXPECTED_VERSION=$(echo "${{ github.head_ref }}" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*-[^-]*' | head -1)
            if [[ -z "$EXPECTED_VERSION" ]]; then
              EXPECTED_VERSION=$(echo "${{ github.head_ref }}" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*')
            fi
            EXPECTED_VERSION=$(echo "$EXPECTED_VERSION" | sed 's/v//')
            
            # Validate version was updated
            if [[ "$CURRENT_VERSION" != "$EXPECTED_VERSION"* ]]; then
              echo "❌ Version in version.json must be updated to $EXPECTED_VERSION for milestone PR"
              exit 1
            fi
            echo "✅ Version correctly updated for milestone"
          fi
          
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "current-milestone=$CURRENT_MILESTONE" >> $GITHUB_OUTPUT

  auto-tag:
    runs-on: ubuntu-latest
    needs: version-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-create Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(jq -r '.version' version.json)
          MILESTONE=$(jq -r '.milestone' version.json)
          PHASE=$(jq -r '.phase' version.json)
          
          # Check if tag already exists
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "Tag v$VERSION already exists"
          else
            echo "Creating tag v$VERSION"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag -a "v$VERSION" -m "Milestone $MILESTONE: $PHASE"
            git push origin "v$VERSION"
          fi

  milestone-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          which jq
          jq --version
      
      - name: Make validation script executable
        run: chmod +x scripts/validate-milestone.sh
      
      - name: Validate Milestone Progress
        run: |
          MILESTONE=$(jq -r '.milestone' version.json)
          PHASE=$(jq -r '.phase' version.json)
          STATUS=$(jq -r '.status' version.json)
          
          echo "📊 Status: $STATUS"
          
          # Ensure jq is in PATH for the script
          export PATH="/usr/bin:$PATH"
          which jq
          
          # Use the scalable validation script
          ./scripts/validate-milestone.sh "$MILESTONE" "$PHASE"
