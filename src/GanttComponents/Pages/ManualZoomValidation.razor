@page "/manual-zoom-validation"
@inject IGanttI18N I18N
@inject IUniversalLogger Logger

<PageTitle>Manual Zoom Controls Integration Validation - Iteration 3.1</PageTitle>

<div class="validation-container">
    <header class="validation-header">
        <h1>🎛️ Manual Zoom Controls Integration Validation</h1>
        <p class="validation-subtitle">
            <strong>Iteration 3.1</strong> - Testing manual zoom controls with TimelineView standalone and GanttComposer integration
        </p>
    </header>

    <div class="validation-content">
        <!-- Current State Display -->
        <div class="state-display">
            <h2>📊 Current Zoom State</h2>
            <div class="state-grid">
                <div class="state-item">
                    <label>Zoom Level:</label>
                    <span class="state-value">@CurrentZoomLevel</span>
                </div>
                <div class="state-item">
                    <label>Zoom Factor:</label>
                    <span class="state-value">@($"{CurrentZoomFactor:F2}x ({CurrentZoomFactor:P0})")</span>
                </div>
                <div class="state-item">
                    <label>Effective Day Width:</label>
                    <span class="state-value">@($"{EffectiveDayWidth:F1}px")</span>
                </div>
                <div class="state-item">
                    <label>Timeline Width:</label>
                    <span class="state-value">@($"{TimelineWidth:F0}px")</span>
                </div>
            </div>
        </div>

        <!-- Manual Zoom Controls -->
        <div class="controls-test">
            <h2>🎛️ Manual Zoom Controls</h2>
            <div class="controls-container">
                <TimelineZoomControls 
                    CurrentZoomLevel="@CurrentZoomLevel"
                    CurrentZoomFactor="@CurrentZoomFactor"
                    OnZoomLevelChanged="@OnZoomLevelChanged"
                    OnZoomFactorChanged="@OnZoomFactorChanged"
                    ShowLevelPresets="true"
                    ShowCurrentState="true"
                    ShowQuickActions="true"
                    ShowManualControls="true"
                    ShowLivePreview="true"
                    ShowLabels="true"
                    MinZoomFactor="0.5"
                    MaxZoomFactor="3.0"
                    ZoomFactorStep="0.1"
                    CssClass="validation-zoom-controls" />
            </div>
        </div>

        <!-- TimelineView Standalone Integration -->
        <div class="timeline-test">
            <h2>📅 TimelineView Standalone Integration</h2>
            <p class="test-description">
                Manual zoom controls should affect the timeline rendering below. 
                Watch the day width, header spacing, and taskbar positioning change as you adjust the zoom.
            </p>
            <TimelineView 
                Tasks="@SampleTasks"
                ZoomLevel="@CurrentZoomLevel"
                ZoomFactor="@CurrentZoomFactor"
                OnZoomLevelChanged="@OnZoomLevelChanged"
                OnZoomFactorChanged="@OnZoomFactorChanged"
                RowHeight="32"
                HeaderMonthHeight="24"
                HeaderDayHeight="24" />
        </div>

        <!-- GanttComposer Full Integration -->
        <div class="composer-test">
            <h2>🗂️ GanttComposer Full Integration</h2>
            <p class="test-description">
                Complete integration test with TaskGrid + TimelineView. 
                Manual zoom should affect only the timeline while maintaining grid alignment.
            </p>
            <GanttComposer 
                Tasks="@SampleTasks"
                OnTaskSelected="@HandleTaskSelection"
                ShowDebugAlignment="@ShowDebugAlignment"
                ZoomLevel="@CurrentZoomLevel"
                ZoomFactor="@CurrentZoomFactor"
                OnZoomLevelChanged="@OnZoomLevelChanged"
                OnZoomFactorChanged="@OnZoomFactorChanged"
                ContainerHeight="400"
                RowHeight="32" />
        </div>

        @if (SelectedTaskId.HasValue)
        {
            var selectedTask = SampleTasks.FirstOrDefault(t => t.Id == SelectedTaskId.Value);
            if (selectedTask != null)
            {
                <div class="selected-task-info alert alert-success mt-3">
                    <strong>Selected Task:</strong> @selectedTask.Name
                    <br />
                    <small>
                        Duration: @selectedTask.Duration | 
                        Start: @selectedTask.StartDate.ToString("yyyy-MM-dd") | 
                        End: @selectedTask.EndDate.ToString("yyyy-MM-dd")
                    </small>
                </div>
            }
        }

        <!-- Integration Testing Checklist -->
        <div class="testing-instructions">
            <h2>🧪 Integration Testing Checklist</h2>
            <div class="checklist">
                <div class="checklist-section">
                    <h3>✅ TimelineView Standalone</h3>
                    <ul>
                        <li>✅ Manual zoom controls affect timeline day width</li>
                        <li>✅ Timeline headers adjust to new day width</li>
                        <li>✅ Task bars stretch/compress with zoom changes</li>
                        <li>✅ Timeline scrolling adapts to new width</li>
                        <li>✅ Visual feedback is immediate and smooth</li>
                    </ul>
                </div>
                
                <div class="checklist-section">
                    <h3>✅ GanttComposer Integration</h3>
                    <ul>
                        <li>✅ Task grid remains fixed width during zoom</li>
                        <li>✅ Timeline adapts to zoom changes</li>
                        <li>✅ Row alignment maintained between grid and timeline</li>
                        <li>✅ Splitter position remains stable</li>
                        <li>✅ Combined scrolling works correctly</li>
                    </ul>
                </div>
                
                <div class="checklist-section">
                    <h3>✅ Manual Controls Behavior</h3>
                    <ul>
                        <li>✅ Slider changes immediately affect timeline</li>
                        <li>✅ Increment/decrement buttons work smoothly</li>
                        <li>✅ Live preview shows during slider drag</li>
                        <li>✅ Boundary limits prevent invalid zoom levels</li>
                        <li>✅ State synchronization across all controls</li>
                    </ul>
                </div>
                
                <div class="checklist-section">
                    <h3>✅ Visual Validation</h3>
                    <ul>
                        <li>✅ Day widths match calculated effective values</li>
                        <li>✅ Task positioning is accurate across zoom levels</li>
                        <li>✅ No visual glitches during zoom transitions</li>
                        <li>✅ Performance remains smooth during interactions</li>
                        <li>✅ Timeline width updates correctly</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Event Log -->
        <div class="event-log">
            <h2>📝 Event Log</h2>
            <div class="log-container">
                @if (EventLog.Any())
                {
                    @foreach (var logEntry in EventLog.TakeLast(10))
                    {
                        <div class="log-entry">
                            <span class="log-timestamp">@logEntry.Timestamp.ToString("HH:mm:ss.fff")</span>
                            <span class="log-message">@logEntry.Message</span>
                        </div>
                    }
                }
                else
                {
                    <div class="log-empty">No events yet. Interact with the zoom controls to see events.</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // State
    private TimelineZoomLevel CurrentZoomLevel { get; set; } = TimelineZoomLevel.MonthDay;
    private double CurrentZoomFactor { get; set; } = 1.0;
    private bool ShowDebugAlignment { get; set; } = false;
    private int? SelectedTaskId { get; set; }
    
    // Validation properties
    private double EffectiveDayWidth => TimelineZoomService.GetConfiguration(CurrentZoomLevel).GetEffectiveDayWidth(CurrentZoomFactor);
    private double TimelineWidth => SampleTasks.Any() ? 
        (SampleTasks.Max(t => t.EndDate) - SampleTasks.Min(t => t.StartDate)).Days * EffectiveDayWidth : 0;
    
    // Sample data for testing
    private List<GanttTask> SampleTasks { get; set; } = new();
    
    // Event tracking
    private List<LogEntry> EventLog { get; set; } = new();
    
    private class LogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = "";
    }
    
    protected override void OnInitialized()
    {
        GenerateSampleTasks();
        AddLogEntry("Manual Zoom Integration Validation page initialized");
        Logger.LogOperation("MANUAL_ZOOM_INTEGRATION_VALIDATION", "Page initialized with sample tasks", new
        {
            CurrentZoomLevel,
            CurrentZoomFactor,
            EffectiveDayWidth,
            TimelineWidth,
            SampleTaskCount = SampleTasks.Count
        });
    }
    
    private void GenerateSampleTasks()
    {
        var startDate = DateTime.Today.AddDays(-30);
        SampleTasks = new List<GanttTask>
        {
            new GanttTask
            {
                Id = 1,
                Name = "Project Planning",
                StartDate = startDate,
                EndDate = startDate.AddDays(7),
                Duration = "7d",
                Progress = 100
            },
            new GanttTask
            {
                Id = 2,
                Name = "Design Phase",
                StartDate = startDate.AddDays(8),
                EndDate = startDate.AddDays(21),
                Duration = "14d",
                Progress = 75
            },
            new GanttTask
            {
                Id = 3,
                Name = "Development",
                StartDate = startDate.AddDays(15),
                EndDate = startDate.AddDays(45),
                Duration = "30d",
                Progress = 45
            },
            new GanttTask
            {
                Id = 4,
                Name = "Testing",
                StartDate = startDate.AddDays(40),
                EndDate = startDate.AddDays(55),
                Duration = "15d",
                Progress = 0
            },
            new GanttTask
            {
                Id = 5,
                Name = "Deployment",
                StartDate = startDate.AddDays(55),
                EndDate = startDate.AddDays(60),
                Duration = "5d",
                Progress = 0
            }
        };
    }
    
    private Task OnZoomLevelChanged(TimelineZoomLevel newLevel)
    {
        var oldLevel = CurrentZoomLevel;
        CurrentZoomLevel = newLevel;
        
        AddLogEntry($"Zoom Level: {oldLevel} → {newLevel} (Timeline Width: {TimelineWidth:F0}px)");
        Logger.LogOperation("MANUAL_ZOOM_INTEGRATION_VALIDATION", "Zoom level changed", new
        {
            OldLevel = oldLevel,
            NewLevel = newLevel,
            CurrentZoomFactor,
            NewEffectiveDayWidth = EffectiveDayWidth,
            NewTimelineWidth = TimelineWidth
        });
        
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task OnZoomFactorChanged(double newFactor)
    {
        var oldFactor = CurrentZoomFactor;
        CurrentZoomFactor = newFactor;
        
        AddLogEntry($"Zoom Factor: {oldFactor:F2}x → {newFactor:F2}x (Day Width: {EffectiveDayWidth:F1}px, Timeline: {TimelineWidth:F0}px)");
        Logger.LogOperation("MANUAL_ZOOM_INTEGRATION_VALIDATION", "Zoom factor changed", new
        {
            OldFactor = oldFactor,
            NewFactor = newFactor,
            CurrentZoomLevel,
            NewEffectiveDayWidth = EffectiveDayWidth,
            NewTimelineWidth = TimelineWidth
        });
        
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void HandleTaskSelection(int taskId)
    {
        SelectedTaskId = taskId;
        AddLogEntry($"Task Selected: ID {taskId}");
        Logger.LogOperation("MANUAL_ZOOM_INTEGRATION_VALIDATION", "Task selected", new { TaskId = taskId });
        StateHasChanged();
    }
    
    private void AddLogEntry(string message)
    {
        EventLog.Add(new LogEntry
        {
            Timestamp = DateTime.Now,
            Message = message
        });
        
        // Keep only recent entries
        if (EventLog.Count > 50)
        {
            EventLog.RemoveRange(0, EventLog.Count - 50);
        }
    }
}

<style>
    .validation-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .validation-header {
        text-align: center;
        margin-bottom: 32px;
        padding: 24px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 12px;
    }
    
    .validation-header h1 {
        margin: 0 0 8px 0;
        font-size: 2.5rem;
        font-weight: 600;
    }
    
    .validation-subtitle {
        margin: 0;
        font-size: 1.1rem;
        opacity: 0.9;
    }
    
    .validation-content {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }
    
    .state-display, .controls-test, .testing-instructions, .event-log {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .state-display h2, .controls-test h2, .testing-instructions h2, .event-log h2 {
        margin: 0 0 16px 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 600;
    }
    
    .state-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 12px;
    }
    
    .state-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        background: #f8f9fa;
        border-radius: 6px;
        border-left: 3px solid #667eea;
    }
    
    .state-item label {
        font-weight: 500;
        color: #555;
    }
    
    .state-value {
        font-weight: 600;
        color: #333;
    }
    
    .state-value.valid {
        color: #28a745;
    }
    
    .state-value.invalid {
        color: #dc3545;
    }
    
    .controls-container {
        padding: 16px;
        background: #f8f9fa;
        border-radius: 6px;
        border: 1px dashed #ccc;
    }

    .test-description {
        color: #666;
        font-style: italic;
        margin-bottom: 12px;
        padding: 8px 12px;
        background: #e8f4fd;
        border-left: 3px solid #2196f3;
        border-radius: 4px;
    }

    .timeline-test, .composer-test {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timeline-test h2, .composer-test h2 {
        margin: 0 0 12px 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 600;
    }
    
    .validation-zoom-controls,
    .validation-zoom-controls-minimal,
    .validation-zoom-controls-extended {
        margin: 0;
    }
    
    .checklist {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 16px;
    }
    
    .checklist-section h3 {
        margin: 0 0 12px 0;
        color: #667eea;
        font-size: 1.1rem;
    }
    
    .checklist-section ul {
        margin: 0;
        padding-left: 20px;
    }
    
    .checklist-section li {
        margin-bottom: 6px;
        line-height: 1.4;
    }
    
    .log-container {
        max-height: 300px;
        overflow-y: auto;
        background: #f8f9fa;
        border-radius: 6px;
        padding: 12px;
    }
    
    .log-entry {
        display: flex;
        gap: 12px;
        margin-bottom: 6px;
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 0.9rem;
    }
    
    .log-timestamp {
        color: #666;
        font-weight: 500;
        min-width: 80px;
    }
    
    .log-message {
        color: #333;
    }
    
    .log-empty {
        color: #999;
        font-style: italic;
        text-align: center;
        padding: 20px;
    }
</style>
