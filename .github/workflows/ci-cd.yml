name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '6.0.x'
  PROJECT_NAME: 'GanttComponents'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          bin/Release/
          obj/Release/
        retention-days: 7

  # Code Quality Analysis
  code-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Install SonarCloud scanner
      run: |
        dotnet tool install --global dotnet-sonarscanner
    
    # Note: You'll need to set up SONAR_TOKEN in GitHub Secrets
    # - name: Begin SonarCloud analysis
    #   run: |
    #     dotnet sonarscanner begin /k:"LQR86_blazor-gantt-components" /o:"lqr86" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    
    - name: Build for analysis
      run: dotnet build --configuration Release
    
    # - name: End SonarCloud analysis
    #   run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Development (Auto-deploy on develop branch)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish application
      run: dotnet publish --configuration Release --output ./publish
    
    - name: Deploy to Development
      run: |
        echo "üöÄ Deploying to Development environment"
        echo "üì¶ Application published to ./publish"
        # Add your deployment script here
        # Example: Deploy to Azure App Service, AWS, or other cloud provider
    
    - name: Health Check
      run: |
        echo "üè• Running health checks..."
        # Add health check commands here

  # Deploy to Staging (Manual approval required)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish application
      run: dotnet publish --configuration Release --output ./publish
    
    - name: Deploy to Staging
      run: |
        echo "üé≠ Deploying to Staging environment"
        echo "üì¶ Application published to ./publish"
        # Add your staging deployment script here

  # Deploy to Production (Manual approval required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish application
      run: dotnet publish --configuration Release --output ./publish
    
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to Production environment"
        echo "üì¶ Application published to ./publish"
        # Add your production deployment script here
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          üéâ New production release of Custom Blazor Gantt Components
          
          ## Changes in this release
          - Automated deployment from commit ${{ github.sha }}
          - Build #${{ github.run_number }}
          
          ## Deployment Info
          - Environment: Production
          - Deployed: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
