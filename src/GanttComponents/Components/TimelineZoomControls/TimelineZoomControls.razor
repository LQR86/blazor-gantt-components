@using GanttComponents.Models
@using GanttComponents.Services
@using Microsoft.AspNetCore.Components
@using System.Reflection
@inject IUniversalLogger Logger
@implements IDisposable

<div class="timeline-zoom-controls @GetEffectiveCssClass()" style="@Style">
    @if (EffectiveConfig.ShowLevelPresets)
    {
        @if (EffectiveConfig.UseDropdownForPresets)
        {
            <div class="zoom-level-dropdown">
                @if (EffectiveConfig.ShowLabels)
                {
                    <span class="zoom-controls-label">Zoom Level</span>
                }
                <select class="zoom-preset-dropdown" 
                        value="@CurrentZoomLevel" 
                        disabled="@Disabled"
                        @onchange="OnDropdownLevelSelected">
                    @foreach (var level in GetVisibleZoomLevels())
                    {
                        var config = TimelineZoomService.GetConfiguration(level);
                        <option value="@level" title="@GetZoomLevelDescription(level)">
                            @GetZoomLevelDisplayName(level)
                        </option>
                    }
                </select>
            </div>
        }
        else
        {
            <div class="zoom-level-presets">
                @if (EffectiveConfig.ShowLabels)
                {
                    <span class="zoom-controls-label">Zoom Level</span>
                }
                
                @foreach (var level in GetVisibleZoomLevels())
                {
                    var config = TimelineZoomService.GetConfiguration(level);
                    var isActive = level == CurrentZoomLevel;
                    var buttonClass = $"zoom-preset-button {(isActive ? "active" : "")}";
                    
                    <button type="button" 
                            class="@buttonClass" 
                            disabled="@(isActive || Disabled)"
                            title="@GetZoomLevelDescription(level)"
                            @onclick="() => OnZoomLevelSelected(level)">
                        @GetZoomLevelDisplayName(level)
                    </button>
                }
            </div>
        }
    }
    
    @if (EffectiveConfig.ShowCurrentState && !EffectiveConfig.HideCurrentState)
    {
        <div class="zoom-current-state">
            @if (EffectiveConfig.ShowLabels)
            {
                <span class="zoom-controls-label">Current</span>
            }
            
            <div class="zoom-current-display">
                <span class="zoom-level-name">@GetZoomLevelDisplayName(CurrentZoomLevel)</span>
                @if (EffectiveConfig.ShowZoomFactor)
                {
                    <span class="zoom-factor-display">@($"{CurrentZoomFactor:P0}")</span>
                }
                @if (EffectiveConfig.ShowDayWidth)
                {
                    <span class="zoom-day-width">@($"{CurrentDayWidth:F0}px")</span>
                }
            </div>
        </div>
    }
    
    @if (EffectiveConfig.ShowQuickActions)
    {
        <div class="zoom-quick-actions">
            @if (EffectiveConfig.ShowLabels)
            {
                <span class="zoom-controls-label">Quick Actions</span>
            }
            
            <div class="zoom-action-buttons">
                <button type="button" 
                        class="zoom-action-button zoom-in" 
                        disabled="@(Disabled || IsAtMaxZoom())"
                        title="Zoom In"
                        @onclick="OnZoomIn">
                    <span class="zoom-icon">+</span>
                    @if (EffectiveConfig.ShowActionLabels)
                    {
                        <span class="zoom-action-text">Zoom In</span>
                    }
                </button>
                
                <button type="button" 
                        class="zoom-action-button zoom-out" 
                        disabled="@(Disabled || IsAtMinZoom())"
                        title="Zoom Out"
                        @onclick="OnZoomOut">
                    <span class="zoom-icon">âˆ’</span>
                    @if (EffectiveConfig.ShowActionLabels)
                    {
                        <span class="zoom-action-text">Zoom Out</span>
                    }
                </button>
            </div>
        </div>
    }
    
    @if (EffectiveConfig.ShowZoomFactorSlider)
    {
        <div class="zoom-factor-slider">
            @if (EffectiveConfig.ShowLabels)
            {
                <span class="zoom-controls-label">Zoom Factor</span>
            }
            
            <div class="zoom-slider-container">
                @{
                    var config = TimelineZoomService.GetConfiguration(CurrentZoomLevel);
                }
                <input type="range" 
                       class="zoom-factor-range"
                       min="@config.MinZoomFactor"
                       max="@config.MaxZoomFactor"
                       step="0.1"
                       value="@CurrentZoomFactor"
                       disabled="@Disabled"
                       @onchange="OnZoomFactorSliderChanged"
                       title="@($"Zoom Factor: {CurrentZoomFactor:F1}x (Range: {config.MinZoomFactor:F1}x - {config.MaxZoomFactor:F1}x)")" />
                
                <span class="zoom-factor-value">@($"{CurrentZoomFactor:F1}x")</span>
            </div>
        </div>
    }
    
    @if (AdditionalContent != null)
    {
        <div class="zoom-additional-content">
            @AdditionalContent
        </div>
    }
</div>

@code {
    // Core zoom state - REQUIRED
    [Parameter, EditorRequired] public TimelineZoomLevel CurrentZoomLevel { get; set; }
    [Parameter, EditorRequired] public double CurrentZoomFactor { get; set; } = 1.0;
    [Parameter, EditorRequired] public EventCallback<TimelineZoomLevel> OnZoomLevelChanged { get; set; }
    [Parameter, EditorRequired] public EventCallback<double> OnZoomFactorChanged { get; set; }
    
    // NEW: Preset configuration system - choose a preset or use Custom for individual control
    [Parameter] public TimelineZoomControlPreset Preset { get; set; } = TimelineZoomControlPreset.Default;
    
    // Composability and customization
    [Parameter] public RenderFragment? AdditionalContent { get; set; }
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Style { get; set; } = "";
    [Parameter] public bool Disabled { get; set; } = false;
    
    // UI configuration - used when Preset = Custom, otherwise ignored
    [Parameter] public bool ShowLevelPresets { get; set; } = true;
    [Parameter] public bool ShowCurrentState { get; set; } = true;
    [Parameter] public bool ShowQuickActions { get; set; } = true;
    [Parameter] public bool ShowLabels { get; set; } = true;
    [Parameter] public bool ShowActionLabels { get; set; } = false; // Icons only by default
    [Parameter] public bool ShowZoomFactor { get; set; } = true;
    [Parameter] public bool ShowDayWidth { get; set; } = false; // Developer feature
    [Parameter] public bool HideCurrentState { get; set; } = false;
    
    // PHASE 2: Continuous Zooming UI Configuration
    [Parameter] public bool ShowZoomFactorSlider { get; set; } = false; // Optional slider for precise zoom control
    
    // Zoom level filtering - for different use cases  
    [Parameter] public IReadOnlyList<TimelineZoomLevel>? VisibleZoomLevels { get; set; }
    [Parameter] public TimelineZoomLevel MinZoomLevel { get; set; } = TimelineZoomLevel.YearQuarter;  // Start from strategic overview
    [Parameter] public TimelineZoomLevel MaxZoomLevel { get; set; } = TimelineZoomLevel.WeekDay;    // End at detailed daily planning
    
    // Hybrid continuous zooming: Combines template switching with factor adjustment
    // Priority 1: Continuous factor zoom within template range
    // Priority 2: Template switching when factor limits reached
    
    // Effective configuration based on preset or custom parameters
    private TimelineZoomControlConfiguration EffectiveConfig
    {
        get
        {
            if (Preset == TimelineZoomControlPreset.Custom)
            {
                // Use individual parameters when Custom preset is selected
                return new TimelineZoomControlConfiguration
                {
                    ShowLevelPresets = ShowLevelPresets,
                    ShowCurrentState = ShowCurrentState,
                    ShowQuickActions = ShowQuickActions,
                    ShowLabels = ShowLabels,
                    ShowActionLabels = ShowActionLabels,
                    ShowZoomFactor = ShowZoomFactor,
                    ShowDayWidth = ShowDayWidth,
                    HideCurrentState = HideCurrentState,
                    ShowZoomFactorSlider = ShowZoomFactorSlider, // PHASE 2: Include slider config
                    CssClass = CssClass,
                    UseDropdownForPresets = false, // Can be added as parameter if needed
                    MaxVisiblePresets = 4  // Updated for 4-level ABC composition system
                };
            }
            else
            {
                // Use predefined preset configuration
                return TimelineZoomControlConfiguration.GetPresetConfiguration(Preset);
            }
        }
    }
    
    // Calculated properties
    private double CurrentDayWidth => TimelineZoomService.GetConfiguration(CurrentZoomLevel).GetEffectiveDayWidth(CurrentZoomFactor);
    
    // Get effective CSS class combining preset and custom classes
    private string GetEffectiveCssClass()
    {
        var effectiveClass = EffectiveConfig.CssClass;
        if (!string.IsNullOrWhiteSpace(CssClass))
        {
            effectiveClass = string.IsNullOrWhiteSpace(effectiveClass) ? CssClass : $"{effectiveClass} {CssClass}";
        }
        return effectiveClass;
    }
    
    // Get visible zoom levels based on configuration
    private IEnumerable<TimelineZoomLevel> GetVisibleZoomLevels()
    {
        if (VisibleZoomLevels != null && VisibleZoomLevels.Count > 0)
        {
            return VisibleZoomLevels;
        }
        
        // ABC COMPOSITION ARCHITECTURE: Show only 4 implemented levels
        var implementedLevels = new List<TimelineZoomLevel>
        {
            // Strategic Overview - 0.78px day width â†’ 70px quarters
            TimelineZoomLevel.YearQuarter,    // Years â†’ Quarters
            
            // Monthly Planning - 2px day width â†’ 60px months  
            TimelineZoomLevel.QuarterMonth,   // Quarters â†’ Months
            
            // Weekly Planning - 8px day width â†’ 56px weeks
            TimelineZoomLevel.MonthWeek,      // Months â†’ Weeks
            
            // Daily Detail - 50px day width â†’ 350px weeks
            TimelineZoomLevel.WeekDay,        // Weeks â†’ Days
        };
        
        // Apply min/max range filtering if needed
        var filteredLevels = implementedLevels
            .Where(level => (int)level >= (int)MinZoomLevel && (int)level <= (int)MaxZoomLevel)
            .OrderBy(x => (int)x)
            .ToList();
        
        return filteredLevels;
    }
    
    // Helper method to check if a zoom level is obsolete
    private bool IsObsoleteZoomLevel(TimelineZoomLevel level)
    {
        // Check if the enum value is marked with ObsoleteAttribute
        var field = typeof(TimelineZoomLevel).GetField(level.ToString());
        return field?.GetCustomAttributes(typeof(ObsoleteAttribute), false).Length > 0;
    }
    
    // Component lifecycle - hardcoded English support
    protected override void OnInitialized()
    {
        Logger.LogComponentLifecycle("TimelineZoomControls", "OnInitialized", new { 
            CurrentZoomLevel, Preset, MinZoomLevel, MaxZoomLevel
        });
    }
    
    // Event handlers
    private async Task OnZoomLevelSelected(TimelineZoomLevel level)
    {
        Logger.LogOperation("ZOOM_CONTROLS", $"ZoomLevelSelected: {level} (current: {CurrentZoomLevel})");
        
        if (level != CurrentZoomLevel && OnZoomLevelChanged.HasDelegate)
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"Invoking OnZoomLevelChanged: {CurrentZoomLevel} -> {level}");
            await OnZoomLevelChanged.InvokeAsync(level);
        }
        else
        {
            Logger.LogWarning("ZoomLevelSelected ignored", new { level, CurrentZoomLevel, HasDelegate = OnZoomLevelChanged.HasDelegate });
        }
    }
    
    private async Task OnDropdownLevelSelected(ChangeEventArgs e)
    {
        if (e.Value != null && Enum.TryParse<TimelineZoomLevel>(e.Value.ToString(), out var level))
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"DropdownZoomLevelSelected: {level}");
            await OnZoomLevelSelected(level);
        }
    }
    
    // PHASE 2: Zoom Factor Slider Handler
    private async Task OnZoomFactorSliderChanged(ChangeEventArgs e)
    {
        if (e.Value != null && double.TryParse(e.Value.ToString(), out var newFactor))
        {
            var clampedFactor = TimelineZoomService.ClampZoomFactor(CurrentZoomLevel, newFactor);
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomFactorSlider: {CurrentZoomLevel} @ {CurrentZoomFactor:F1}x -> {clampedFactor:F1}x");
            await OnZoomFactorChanged.InvokeAsync(clampedFactor);
        }
    }
    
    private async Task OnZoomIn()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomIn button clicked");
        
        // PHASE 1: Continuous Zooming - Try factor zoom first, then level switch
        
        // Check if we can zoom in within current template's factor range
        if (TimelineZoomService.CanZoomIn(CurrentZoomLevel, CurrentZoomFactor, 0.1))
        {
            // Continuous zoom within current template
            var newFactor = Math.Round(CurrentZoomFactor + 0.1, 1); // Round to 1 decimal place
            var clampedFactor = TimelineZoomService.ClampZoomFactor(CurrentZoomLevel, newFactor);
            
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomIn (Continuous): {CurrentZoomLevel} @ {CurrentZoomFactor:F1}x -> {clampedFactor:F1}x");
            await OnZoomFactorChanged.InvokeAsync(clampedFactor);
            return;
        }
        
        // If factor zoom is not possible, try level switch (existing behavior)
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var currentIndex = levels.IndexOf(CurrentZoomLevel);
        
        if (currentIndex < levels.Count - 1) // Can zoom in (higher detail = higher enum value)
        {
            var newLevel = levels[currentIndex + 1];
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomIn (Level Switch): {CurrentZoomLevel} -> {newLevel}");
            await OnZoomLevelSelected(newLevel);
        }
        else
        {
            Logger.LogWarning("Cannot zoom in - already at maximum zoom (level and factor)", new { CurrentZoomLevel, CurrentZoomFactor, currentIndex });
        }
    }
    
    private async Task OnZoomOut()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomOut button clicked");
        
        // PHASE 1: Continuous Zooming - Try factor zoom first, then level switch
        
        // Check if we can zoom out within current template's factor range
        if (TimelineZoomService.CanZoomOut(CurrentZoomLevel, CurrentZoomFactor, 0.1))
        {
            // Continuous zoom within current template
            var newFactor = Math.Round(CurrentZoomFactor - 0.1, 1); // Round to 1 decimal place
            var clampedFactor = TimelineZoomService.ClampZoomFactor(CurrentZoomLevel, newFactor);
            
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomOut (Continuous): {CurrentZoomLevel} @ {CurrentZoomFactor:F1}x -> {clampedFactor:F1}x");
            await OnZoomFactorChanged.InvokeAsync(clampedFactor);
            return;
        }
        
        // If factor zoom is not possible, try level switch (existing behavior)
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var currentIndex = levels.IndexOf(CurrentZoomLevel);
        
        if (currentIndex > 0) // Can zoom out (lower detail = lower enum value)
        {
            var newLevel = levels[currentIndex - 1];
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomOut (Level Switch): {CurrentZoomLevel} -> {newLevel}");
            await OnZoomLevelSelected(newLevel);
        }
        else
        {
            Logger.LogWarning("Cannot zoom out - already at minimum zoom (level and factor)", new { CurrentZoomLevel, CurrentZoomFactor, currentIndex });
        }
    }
    
    // PHASE 3: Updated state checks for continuous zooming
    private bool IsAtMaxZoom()
    {
        // Check both zoom factor boundary AND zoom level boundary
        var isAtFactorMax = !TimelineZoomService.CanZoomIn(CurrentZoomLevel, CurrentZoomFactor, 0.1);
        
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var isAtLevelMax = levels.Count > 0 && CurrentZoomLevel == levels.Last();
        
        // At max zoom when both factor and level are at maximum
        return isAtFactorMax && isAtLevelMax;
    }
    
    private bool IsAtMinZoom()
    {
        // Check both zoom factor boundary AND zoom level boundary
        var isAtFactorMin = !TimelineZoomService.CanZoomOut(CurrentZoomLevel, CurrentZoomFactor, 0.1);
        
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var isAtLevelMin = levels.Count > 0 && CurrentZoomLevel == levels.First();
        
        // At min zoom when both factor and level are at minimum
        return isAtFactorMin && isAtLevelMin;
    }
    
    private string GetZoomLevelDisplayName(TimelineZoomLevel level)
    {
        return level switch
        {
            TimelineZoomLevel.WeekDay => "Week-Day",
            TimelineZoomLevel.MonthWeek => "Month-Week",
            TimelineZoomLevel.QuarterMonth => "Quarter-Month",
            TimelineZoomLevel.YearQuarter => "Year-Quarter",
            _ => level.ToString()
        };
    }
    
    private string GetZoomLevelDescription(TimelineZoomLevel level)
    {
        return level switch
        {
            TimelineZoomLevel.WeekDay => "Weekly view showing individual days",
            TimelineZoomLevel.MonthWeek => "Monthly view with weekly breakdown",
            TimelineZoomLevel.QuarterMonth => "Quarterly view with monthly breakdown",
            TimelineZoomLevel.YearQuarter => "Yearly view with quarterly breakdown",
            _ => $"{level} zoom level"
        };
    }
    
    public void Dispose()
    {
        // Component cleanup - no longer needed for language changes
    }
}
