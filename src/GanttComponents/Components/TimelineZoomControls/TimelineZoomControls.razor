@using GanttComponents.Models
@using GanttComponents.Services
@using Microsoft.AspNetCore.Components
@inject IGanttI18N I18N
@inject IUniversalLogger Logger

<div class="timeline-zoom-controls @CssClass" style="@Style">
    @if (ShowLevelPresets)
    {
        <div class="zoom-level-presets">
            @if (ShowLabels)
            {
                <span class="zoom-controls-label">@I18N.T("ZoomControls.ZoomLevel")</span>
            }
            
            @foreach (var level in GetVisibleZoomLevels())
            {
                var config = TimelineZoomService.GetConfiguration(level);
                var isActive = level == CurrentZoomLevel;
                var buttonClass = $"zoom-preset-button {(isActive ? "active" : "")}";
                
                <button type="button" 
                        class="@buttonClass" 
                        disabled="@(isActive || Disabled)"
                        title="@I18N.T(config.DescriptionKey)"
                        @onclick="() => OnZoomLevelSelected(level)">
                    @I18N.T(config.DisplayNameKey)
                </button>
            }
        </div>
    }
    
    @if (ShowCurrentState && !HideCurrentState)
    {
        <div class="zoom-current-state">
            @if (ShowLabels)
            {
                <span class="zoom-controls-label">@I18N.T("ZoomControls.Current")</span>
            }
            
            <div class="zoom-current-display">
                <span class="zoom-level-name">@I18N.T(TimelineZoomService.GetConfiguration(CurrentZoomLevel).DisplayNameKey)</span>
                @if (ShowZoomFactor)
                {
                    <span class="zoom-factor-display">@($"{CurrentZoomFactor:P0}")</span>
                }
                @if (ShowDayWidth)
                {
                    <span class="zoom-day-width">@($"{CurrentDayWidth:F0}px")</span>
                }
            </div>
        </div>
    }
    
    @if (ShowQuickActions)
    {
        <div class="zoom-quick-actions">
            @if (ShowLabels)
            {
                <span class="zoom-controls-label">@I18N.T("ZoomControls.QuickActions")</span>
            }
            
            <div class="zoom-action-buttons">
                <button type="button" 
                        class="zoom-action-button zoom-in" 
                        disabled="@(Disabled || IsAtMaxZoom())"
                        title="@I18N.T("ZoomControls.ZoomIn")"
                        @onclick="OnZoomIn">
                    <span class="zoom-icon">+</span>
                    @if (ShowActionLabels)
                    {
                        <span class="zoom-action-text">@I18N.T("ZoomControls.ZoomIn")</span>
                    }
                </button>
                
                <button type="button" 
                        class="zoom-action-button zoom-out" 
                        disabled="@(Disabled || IsAtMinZoom())"
                        title="@I18N.T("ZoomControls.ZoomOut")"
                        @onclick="OnZoomOut">
                    <span class="zoom-icon">−</span>
                    @if (ShowActionLabels)
                    {
                        <span class="zoom-action-text">@I18N.T("ZoomControls.ZoomOut")</span>
                    }
                </button>
            </div>
        </div>
    }
    
    @if (ShowManualControls)
    {
        <div class="zoom-manual-controls">
            @if (ShowLabels)
            {
                <span class="zoom-controls-label">@I18N.T("ZoomControls.ManualZoom")</span>
            }
            
            <div class="zoom-manual-section">
                <div class="zoom-slider-container">
                    <button type="button" 
                            class="zoom-increment-button zoom-decrement" 
                            disabled="@(Disabled || IsAtMinZoomFactor())"
                            title="@I18N.T("ZoomControls.ZoomFactorDecrease")"
                            @onclick="OnZoomFactorDecrement">
                        <span class="zoom-icon">−</span>
                    </button>
                    
                    <input type="range" 
                           class="zoom-factor-slider" 
                           min="@MinZoomFactor" 
                           max="@MaxZoomFactor" 
                           step="@ZoomFactorStep"
                           value="@CurrentZoomFactor" 
                           disabled="@Disabled"
                           title="@I18N.T("ZoomControls.ZoomFactorSlider")"
                           @oninput="OnZoomFactorSliderChange"
                           @onchange="OnZoomFactorSliderComplete" />
                    
                    <button type="button" 
                            class="zoom-increment-button zoom-increment" 
                            disabled="@(Disabled || IsAtMaxZoomFactor())"
                            title="@I18N.T("ZoomControls.ZoomFactorIncrease")"
                            @onclick="OnZoomFactorIncrement">
                        <span class="zoom-icon">+</span>
                    </button>
                </div>
                
                <div class="zoom-factor-display-detailed">
                    <span class="zoom-factor-value">@($"{CurrentZoomFactor:P0}")</span>
                    @if (ShowLivePreview && _isSliderActive)
                    {
                        <span class="zoom-factor-preview">@($"→ {_previewZoomFactor:P0}")</span>
                    }
                </div>
            </div>
        </div>
    }
    
    @if (AdditionalContent != null)
    {
        <div class="zoom-additional-content">
            @AdditionalContent
        </div>
    }
</div>

@code {
    // Core zoom state - REQUIRED
    [Parameter, EditorRequired] public TimelineZoomLevel CurrentZoomLevel { get; set; }
    [Parameter, EditorRequired] public double CurrentZoomFactor { get; set; } = 1.0;
    [Parameter, EditorRequired] public EventCallback<TimelineZoomLevel> OnZoomLevelChanged { get; set; }
    [Parameter, EditorRequired] public EventCallback<double> OnZoomFactorChanged { get; set; }
    
    // Composability and customization
    [Parameter] public RenderFragment? AdditionalContent { get; set; }
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Style { get; set; } = "";
    [Parameter] public bool Disabled { get; set; } = false;
    
    // UI configuration - all optional with sensible defaults
    [Parameter] public bool ShowLevelPresets { get; set; } = true;
    [Parameter] public bool ShowCurrentState { get; set; } = true;
    [Parameter] public bool ShowQuickActions { get; set; } = true;
    [Parameter] public bool ShowLabels { get; set; } = true;
    [Parameter] public bool ShowActionLabels { get; set; } = false; // Icons only by default
    [Parameter] public bool ShowZoomFactor { get; set; } = true;
    [Parameter] public bool ShowDayWidth { get; set; } = false; // Developer feature
    [Parameter] public bool HideCurrentState { get; set; } = false;
    
    // Zoom level filtering - for different use cases
    [Parameter] public IReadOnlyList<TimelineZoomLevel>? VisibleZoomLevels { get; set; }
    [Parameter] public TimelineZoomLevel MinZoomLevel { get; set; } = TimelineZoomLevel.WeekDay;
    [Parameter] public TimelineZoomLevel MaxZoomLevel { get; set; } = TimelineZoomLevel.YearQuarter;
    
    // Manual zoom controls - NEW for Iteration 3.1
    [Parameter] public bool ShowManualControls { get; set; } = true;
    [Parameter] public bool ShowLivePreview { get; set; } = true;
    [Parameter] public double MinZoomFactor { get; set; } = 0.5;
    [Parameter] public double MaxZoomFactor { get; set; } = 3.0;
    [Parameter] public double ZoomFactorStep { get; set; } = 0.1;
    
    // Internal state for live preview
    private bool _isSliderActive = false;
    private double _previewZoomFactor = 1.0;
    
    // Calculated properties
    private double CurrentDayWidth => TimelineZoomService.GetConfiguration(CurrentZoomLevel).GetEffectiveDayWidth(CurrentZoomFactor);
    
    // Get visible zoom levels based on configuration
    private IEnumerable<TimelineZoomLevel> GetVisibleZoomLevels()
    {
        if (VisibleZoomLevels != null && VisibleZoomLevels.Count > 0)
        {
            return VisibleZoomLevels;
        }
        
        // Use min/max range - NOTE: WeekDay=0 (detailed) to YearQuarter=5 (overview)
        var allLevels = Enum.GetValues<TimelineZoomLevel>().OrderBy(x => (int)x);
        var filteredLevels = allLevels.Where(level => level >= MinZoomLevel && level <= MaxZoomLevel).ToList();
        
        return filteredLevels;
    }
    
    // Event handlers
    private async Task OnZoomLevelSelected(TimelineZoomLevel level)
    {
        Logger.LogOperation("ZOOM_CONTROLS", $"ZoomLevelSelected: {level} (current: {CurrentZoomLevel})");
        
        if (level != CurrentZoomLevel && OnZoomLevelChanged.HasDelegate)
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"Invoking OnZoomLevelChanged: {CurrentZoomLevel} -> {level}");
            await OnZoomLevelChanged.InvokeAsync(level);
        }
        else
        {
            Logger.LogWarning("ZoomLevelSelected ignored", new { level, CurrentZoomLevel, HasDelegate = OnZoomLevelChanged.HasDelegate });
        }
    }
    
    private async Task OnZoomIn()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomIn button clicked");
        
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var currentIndex = levels.IndexOf(CurrentZoomLevel);
        
        if (currentIndex > 0) // Can zoom in (higher detail = lower index)
        {
            var newLevel = levels[currentIndex - 1];
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomIn: {CurrentZoomLevel} -> {newLevel}");
            await OnZoomLevelSelected(newLevel);
        }
        else
        {
            Logger.LogWarning("Cannot zoom in - already at maximum zoom", new { CurrentZoomLevel, currentIndex });
        }
    }
    
    private async Task OnZoomOut()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomOut button clicked");
        
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var currentIndex = levels.IndexOf(CurrentZoomLevel);
        
        if (currentIndex < levels.Count - 1) // Can zoom out (lower detail = higher index)
        {
            var newLevel = levels[currentIndex + 1];
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomOut: {CurrentZoomLevel} -> {newLevel}");
            await OnZoomLevelSelected(newLevel);
        }
        else
        {
            Logger.LogWarning("Cannot zoom out - already at minimum zoom", new { CurrentZoomLevel, currentIndex });
        }
    }
    
    // State checks
    private bool IsAtMaxZoom()
    {
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var result = levels.Count > 0 && CurrentZoomLevel == levels.First();
        return result;
    }
    
    private bool IsAtMinZoom()
    {
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var result = levels.Count > 0 && CurrentZoomLevel == levels.Last();
        return result;
    }
    
    // Manual zoom factor methods - NEW for Iteration 3.1
    private bool IsAtMinZoomFactor()
    {
        return CurrentZoomFactor <= MinZoomFactor;
    }
    
    private bool IsAtMaxZoomFactor()
    {
        return CurrentZoomFactor >= MaxZoomFactor;
    }
    
    private async Task OnZoomFactorIncrement()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomFactorIncrement button clicked");
        
        var newFactor = Math.Min(MaxZoomFactor, CurrentZoomFactor + ZoomFactorStep);
        if (Math.Abs(newFactor - CurrentZoomFactor) > 0.001) // Avoid floating point precision issues
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomFactorIncrement: {CurrentZoomFactor:F2} -> {newFactor:F2}");
            await OnZoomFactorChanged.InvokeAsync(newFactor);
        }
        else
        {
            Logger.LogWarning("Cannot increment zoom factor - already at maximum", new { CurrentZoomFactor, MaxZoomFactor });
        }
    }
    
    private async Task OnZoomFactorDecrement()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomFactorDecrement button clicked");
        
        var newFactor = Math.Max(MinZoomFactor, CurrentZoomFactor - ZoomFactorStep);
        if (Math.Abs(newFactor - CurrentZoomFactor) > 0.001) // Avoid floating point precision issues
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomFactorDecrement: {CurrentZoomFactor:F2} -> {newFactor:F2}");
            await OnZoomFactorChanged.InvokeAsync(newFactor);
        }
        else
        {
            Logger.LogWarning("Cannot decrement zoom factor - already at minimum", new { CurrentZoomFactor, MinZoomFactor });
        }
    }
    
    private void OnZoomFactorSliderChange(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var newFactor))
        {
            // Live preview during slider movement
            _isSliderActive = true;
            _previewZoomFactor = Math.Max(MinZoomFactor, Math.Min(MaxZoomFactor, newFactor));
            
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomFactorSlider preview: {CurrentZoomFactor:F2} -> {_previewZoomFactor:F2}");
            StateHasChanged(); // Update UI for live preview
        }
    }
    
    private async Task OnZoomFactorSliderComplete(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var newFactor))
        {
            _isSliderActive = false;
            var clampedFactor = Math.Max(MinZoomFactor, Math.Min(MaxZoomFactor, newFactor));
            
            if (Math.Abs(clampedFactor - CurrentZoomFactor) > 0.001) // Avoid floating point precision issues
            {
                Logger.LogOperation("ZOOM_CONTROLS", $"ZoomFactorSlider complete: {CurrentZoomFactor:F2} -> {clampedFactor:F2}");
                await OnZoomFactorChanged.InvokeAsync(clampedFactor);
            }
            else
            {
                Logger.LogOperation("ZOOM_CONTROLS", "ZoomFactorSlider complete: no change needed");
                StateHasChanged(); // Clear preview state
            }
        }
    }
}
