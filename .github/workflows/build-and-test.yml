name: Build and Test (Safety Net)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    # This workflow runs on ALL PRs as a safety net
    # Specialized workflows handle branch-specific validation

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # Detect branch type for conditional job execution
  branch-detection:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      branch-type: ${{ steps.detect.outputs.branch-type }}
      skip-build: ${{ steps.detect.outputs.skip-build }}
    steps:
      - name: Detect Branch Type
        id: detect
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "üîç Detecting branch type: $BRANCH_NAME"
          
          # Detect branch type
          if [[ "$BRANCH_NAME" =~ ^feat/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "branch-type=milestone" >> $GITHUB_OUTPUT
            echo "skip-build=false" >> $GITHUB_OUTPUT
            echo "üìã Milestone feature branch - full CI/CD required"
          elif [[ "$BRANCH_NAME" =~ ^(fix|hotfix)/ ]]; then
            echo "branch-type=fix" >> $GITHUB_OUTPUT
            echo "skip-build=false" >> $GITHUB_OUTPUT
            echo "üîß Fix branch - full testing required"
          elif [[ "$BRANCH_NAME" =~ ^docs/ ]]; then
            echo "branch-type=docs" >> $GITHUB_OUTPUT
            echo "skip-build=true" >> $GITHUB_OUTPUT
            echo "üìö Documentation branch - skipping build"
          elif [[ "$BRANCH_NAME" =~ ^ci/ ]]; then
            echo "branch-type=ci" >> $GITHUB_OUTPUT
            echo "skip-build=false" >> $GITHUB_OUTPUT
            echo "üîÑ CI branch - testing CI changes"
          else
            echo "branch-type=standard" >> $GITHUB_OUTPUT
            echo "skip-build=false" >> $GITHUB_OUTPUT
            echo "‚öôÔ∏è Standard branch - normal CI/CD"
          fi

  # Main build and test job - Windows focused
  build-and-test:
    runs-on: windows-latest  # Using Windows for Windows 7/10 compatibility
    needs: branch-detection
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && needs.branch-detection.outputs.skip-build != 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~\.nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build Debug
      run: dotnet build --configuration Debug --no-restore
    
    - name: Build Release
      run: dotnet build --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal
    
    - name: Publish for Windows
      run: dotnet publish --configuration Release --output .\publish\windows
    
    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: .\publish\windows\
        retention-days: 30

  # Code quality check (basic)
  code-analysis:
    runs-on: windows-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build for analysis
      run: dotnet build --configuration Release
    
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

  # Basic security scan (Windows compatible)
  security-scan:
    runs-on: windows-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Check for vulnerable packages
      run: |
        dotnet restore
        dotnet list package --vulnerable --include-transitive
    
    - name: Check for deprecated packages
      run: dotnet list package --deprecated
