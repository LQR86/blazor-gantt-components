@page "/timeline-demo"
@using GanttComponents.Models
@using GanttComponents.Models.ValueObjects
@using GanttComponents.Components.TimelineView
@using GanttComponents.Components.TimelineZoomControls
@using GanttComponents.Services
@inject IGanttTaskService TaskService
@inject IGanttI18N I18N
@inject IUniversalLogger Logger

<PageTitle>@I18N.T("page.title.timeline-demo")</PageTitle>

<h1>@I18N.T("demo.timeline.title")</h1>

<div class="demo-container">
    <div class="demo-section">
        <h3>âœ¨ Timeline Zoom Control Presets (v0.8.5) - NEW!</h3>
        <p>Comprehensive showcase of all preset configurations for different UI scenarios.</p>
        
        <!-- Zoom Controls Presets Demo Section -->
        <div class="zoom-controls-demo">
            <h4>All Preset Configurations</h4>
            
            <!-- 1. Default Configuration -->
            <div class="zoom-demo-variant">
                <h5>1. Default - Full Featured</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.Default)</p>
                <TimelineZoomControls Preset="TimelineZoomControlPreset.Default"
                                     CurrentZoomLevel="@CurrentZoomLevel"
                                     CurrentZoomFactor="@CurrentZoomFactor"
                                     OnZoomLevelChanged="HandleZoomLevelChanged"
                                     OnZoomFactorChanged="HandleZoomFactorChanged" />
            </div>
            
            <!-- 2. Extremely Compact -->
            <div class="zoom-demo-variant">
                <h5>2. Extremely Compact - Minimal Toolbar</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.ExtremelyCompact)</p>
                <div class="demo-toolbar">
                    <span class="toolbar-item">File</span>
                    <span class="toolbar-item">Edit</span>
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.ExtremelyCompact"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                    <span class="toolbar-item">View</span>
                    <span class="toolbar-item">Help</span>
                </div>
            </div>
            
            <!-- 3. Compact Labeled -->
            <div class="zoom-demo-variant">
                <h5>3. Compact Labeled - Spacious Toolbar</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.CompactLabeled)</p>
                <div class="demo-toolbar spacious">
                    <span class="toolbar-item">Project</span>
                    <span class="toolbar-item">Timeline</span>
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.CompactLabeled"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                    <span class="toolbar-item">Settings</span>
                </div>
            </div>
            
            <!-- 4. Compact Dropdown -->
            <div class="zoom-demo-variant">
                <h5>4. Compact Dropdown - Control Panel</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.CompactDropdown)</p>
                <div class="demo-control-panel">
                    <div class="panel-section">
                        <label>Display Options:</label>
                        <TimelineZoomControls Preset="TimelineZoomControlPreset.CompactDropdown"
                                             CurrentZoomLevel="@CurrentZoomLevel"
                                             CurrentZoomFactor="@CurrentZoomFactor"
                                             OnZoomLevelChanged="HandleZoomLevelChanged"
                                             OnZoomFactorChanged="HandleZoomFactorChanged" />
                    </div>
                </div>
            </div>
            
            <!-- 5. Preset Only -->
            <div class="zoom-demo-variant">
                <h5>5. Preset Only - Clean Level Selection</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.PresetOnly)</p>
                <div class="clean-section">
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.PresetOnly"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                </div>
            </div>
            
            <!-- 6. Status Only -->
            <div class="zoom-demo-variant">
                <h5>6. Status Only - Read-Only Display</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.StatusOnly)</p>
                <div class="demo-status-bar">
                    <span class="status-item">Ready</span>
                    <span class="status-item">|</span>
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.StatusOnly"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                    <span class="status-item">|</span>
                    <span class="status-item">1,234 tasks loaded</span>
                </div>
            </div>
            
            <!-- 7. Debug Configuration -->
            <div class="zoom-demo-variant">
                <h5>7. Debug - All Features Visible</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.Debug)</p>
                <div class="debug-section">
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.Debug"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                </div>
            </div>
            
            <!-- 8. Minimal Presets -->
            <div class="zoom-demo-variant">
                <h5>8. Minimal Presets - Clean Button Strip</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.MinimalPresets)</p>
                <div class="minimal-section">
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.MinimalPresets"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                </div>
            </div>
            
            <!-- 9. Action Focused -->
            <div class="zoom-demo-variant">
                <h5>9. Action Focused - Prominent Zoom Controls</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.ActionFocused)</p>
                <div class="action-section">
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.ActionFocused"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                </div>
            </div>
            
            <!-- 10. Custom Configuration -->
            <div class="zoom-demo-variant">
                <h5>10. Custom - Individual Parameter Control</h5>
                <p class="preset-description">@TimelineZoomControlConfiguration.GetPresetDescription(TimelineZoomControlPreset.Custom)</p>
                <div class="custom-section">
                    <TimelineZoomControls Preset="TimelineZoomControlPreset.Custom"
                                         ShowLevelPresets="true"
                                         ShowCurrentState="true"
                                         ShowQuickActions="false"
                                         ShowLabels="false"
                                         ShowZoomFactor="true"
                                         ShowDayWidth="true"
                                         CurrentZoomLevel="@CurrentZoomLevel"
                                         CurrentZoomFactor="@CurrentZoomFactor"
                                         OnZoomLevelChanged="HandleZoomLevelChanged"
                                         OnZoomFactorChanged="HandleZoomFactorChanged" />
                    <small class="custom-note">Custom example: Presets + Status, No Actions, No Labels, Show Technical Info</small>
                </div>
            </div>
            
            <!-- Responsive Testing Section -->
            <div class="zoom-demo-variant responsive-test">
                <h5>ðŸ“± Responsive Testing</h5>
                <p class="preset-description">All presets automatically adapt to container size. Resize your browser to see responsive behavior.</p>
                <div class="responsive-demo">
                    <div class="narrow-container">
                        <h6>Narrow Container (300px):</h6>
                        <TimelineZoomControls Preset="TimelineZoomControlPreset.Default"
                                             CurrentZoomLevel="@CurrentZoomLevel"
                                             CurrentZoomFactor="@CurrentZoomFactor"
                                             OnZoomLevelChanged="HandleZoomLevelChanged"
                                             OnZoomFactorChanged="HandleZoomFactorChanged" />
                    </div>
                    <div class="medium-container">
                        <h6>Medium Container (600px):</h6>
                        <TimelineZoomControls Preset="TimelineZoomControlPreset.CompactDropdown"
                                             CurrentZoomLevel="@CurrentZoomLevel"
                                             CurrentZoomFactor="@CurrentZoomFactor"
                                             OnZoomLevelChanged="HandleZoomLevelChanged"
                                             OnZoomFactorChanged="HandleZoomFactorChanged" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="demo-section">
        <h3>@I18N.T("demo.timeline.section")</h3>
        <p>@I18N.T("demo.timeline.description")</p>
        
        <!-- Main zoom controls for timeline -->
        <div class="timeline-controls">
            <TimelineZoomControls CurrentZoomLevel="@CurrentZoomLevel"
                                 CurrentZoomFactor="@CurrentZoomFactor"
                                 OnZoomLevelChanged="HandleZoomLevelChanged"
                                 OnZoomFactorChanged="HandleZoomFactorChanged"
                                 ShowDayWidth="true">
                <AdditionalContent>
                    <div class="zoom-status">
                        <span class="status-label">Live Demo Status:</span>
                        <span class="status-value">@($"Effective Day Width: {EffectiveDayWidth:F0}px")</span>
                    </div>
                </AdditionalContent>
            </TimelineZoomControls>
        </div>
        
        <div class="timeline-container">
            <TimelineView Tasks="@SampleTasks" 
                         ZoomLevel="@CurrentZoomLevel"
                         ZoomFactor="@CurrentZoomFactor"
                         OnZoomLevelChanged="HandleZoomLevelChanged"
                         OnZoomFactorChanged="HandleZoomFactorChanged"
                         OnTaskSelected="HandleTaskSelected" 
                         OnScrollChanged="HandleScrollChanged"
                         RowHeight="32"
                         HeaderMonthHeight="32"
                         HeaderDayHeight="24" />
        </div>
    </div>

    @if (SelectedTaskInfo != null)
    {
        <div class="demo-section">
            <h4>@I18N.T("demo.selected-task")</h4>
            <div class="task-info">
                <p><strong>@I18N.T("task.wbs-code"):</strong> @SelectedTaskInfo.WbsCode</p>
                <p><strong>@I18N.T("task.name"):</strong> @SelectedTaskInfo.Name</p>
                <p><strong>@I18N.T("task.start-date"):</strong> @SelectedTaskInfo.StartDate.ToString("MM/dd/yyyy")</p>
                <p><strong>@I18N.T("task.end-date"):</strong> @SelectedTaskInfo.EndDate.ToString("MM/dd/yyyy")</p>
                <p><strong>@I18N.T("task.duration"):</strong> @SelectedTaskInfo.Duration</p>
                <p><strong>@I18N.T("task.progress"):</strong> @SelectedTaskInfo.Progress%</p>
            </div>
        </div>
    }

    <div class="demo-section">
        <h4>Component Independence Validation</h4>
        <ul>
            <li>âœ… <strong>Standalone Operation</strong>: TimelineView works without TaskGrid</li>
            <li>âœ… <strong>Own Data Source</strong>: Independent task list and state management</li>
            <li>âœ… <strong>SVG Timeline</strong>: Day-based scale (40px/day) with month/day headers</li>
            <li>âœ… <strong>Task Bar Rendering</strong>: Simple rectangles with WBS code labels</li>
            <li>âœ… <strong>UTC Date Handling</strong>: Day precision only, no time components</li>
            <li>âœ… <strong>Row Height Consistency</strong>: 32px rows to match TaskGrid</li>
            <li>âœ… <strong>Event Communication</strong>: Task selection events work independently</li>
            <li>âœ… <strong>Scrolling</strong>: Horizontal and vertical scroll functionality</li>
        </ul>
    </div>

    <div class="demo-section">
        <h4>Architecture Requirements Satisfied</h4>
        <ul>
            <li>âœ… <strong>REQUIREMENT 5</strong>: TimelineView component works standalone âœ“</li>
            <li>âœ… <strong>REQUIREMENT 6</strong>: Fixed row heights for alignment preparation âœ“</li>
            <li>âœ… <strong>REQUIREMENT 10</strong>: SVG-based timeline rendering âœ“</li>
            <li>âœ… <strong>REQUIREMENT 1</strong>: Day-level scheduling only âœ“</li>
            <li>âœ… <strong>REQUIREMENT 2</strong>: UTC date storage with day precision âœ“</li>
            <li>âœ… <strong>REQUIREMENT 12</strong>: WBS codes as task identifiers âœ“</li>
        </ul>
    </div>

    <div class="demo-actions">
        <button class="btn-primary" @onclick="RefreshData">Refresh Timeline Data</button>
        <button class="btn-secondary" @onclick="() => { SelectedTaskInfo = null; StateHasChanged(); }">Clear Selection</button>
    </div>
</div>

@code {
    private List<GanttTask> SampleTasks { get; set; } = new();
    private GanttTask? SelectedTaskInfo { get; set; }
    
    // Zoom state properties
    private TimelineZoomLevel CurrentZoomLevel { get; set; } = TimelineZoomLevel.MonthWeekOptimal50px;
    private double CurrentZoomFactor { get; set; } = 1.0; // ABC composition uses fixed 1.0 factor
    
    // Calculated properties
    private double EffectiveDayWidth => TimelineZoomService.GetConfiguration(CurrentZoomLevel).GetEffectiveDayWidth(CurrentZoomFactor);

    protected override async Task OnInitializedAsync()
    {
        await LoadSampleData();
    }
    
    // Zoom event handlers
    private async Task HandleZoomLevelChanged(TimelineZoomLevel newLevel)
    {
        Logger.LogOperation("TIMELINE_DEMO", $"HandleZoomLevelChanged: {CurrentZoomLevel} -> {newLevel}");
        
        var oldLevel = CurrentZoomLevel;
        CurrentZoomLevel = newLevel;
        
        Logger.LogStateChange("TimelineDemo", "CurrentZoomLevel", oldLevel, newLevel);
        Logger.LogDebugInfo("Zoom state after change", new { 
            CurrentZoomLevel = newLevel, 
            CurrentZoomFactor, 
            EffectiveDayWidth 
        });
        
        await InvokeAsync(StateHasChanged);
        Logger.LogOperation("TIMELINE_DEMO", "StateHasChanged invoked after zoom level change");
    }
    
    private async Task HandleZoomFactorChanged(double newFactor)
    {
        Logger.LogOperation("TIMELINE_DEMO", $"HandleZoomFactorChanged: {CurrentZoomFactor} -> {newFactor}");
        
        var oldFactor = CurrentZoomFactor;
        CurrentZoomFactor = newFactor;
        
        Logger.LogStateChange("TimelineDemo", "CurrentZoomFactor", oldFactor, newFactor);
        Logger.LogDebugInfo("Zoom factor after change", new { 
            CurrentZoomLevel, 
            CurrentZoomFactor = newFactor, 
            EffectiveDayWidth 
        });
        
        await InvokeAsync(StateHasChanged);
        Logger.LogOperation("TIMELINE_DEMO", "StateHasChanged invoked after zoom factor change");
    }

    private async Task LoadSampleData()
    {
        try
        {
            SampleTasks = await TaskService.GetAllTasksAsync();
            
            // Ensure we have some sample data for timeline demo
            if (!SampleTasks.Any())
            {
                SampleTasks = GenerateTimelineSampleData();
            }
        }
        catch (Exception)
        {
            // Fallback to generated data if service fails
            SampleTasks = GenerateTimelineSampleData();
        }
    }

    private List<GanttTask> GenerateTimelineSampleData()
    {
        var baseDate = DateTime.UtcNow.Date;
        
        return new List<GanttTask>
        {
            new GanttTask 
            { 
                Id = 1, 
                WbsCode = "1", 
                Name = "Timeline Demo Project", 
                StartDate = GanttDate.FromDateTime(baseDate),
                EndDate = GanttDate.FromDateTime(baseDate.AddDays(30)),
                Duration = "30d",
                Progress = 25
            },
            new GanttTask 
            { 
                Id = 2, 
                WbsCode = "1.1", 
                Name = "Planning Phase", 
                StartDate = GanttDate.FromDateTime(baseDate),
                EndDate = GanttDate.FromDateTime(baseDate.AddDays(5)),
                Duration = "5d",
                Progress = 100
            },
            new GanttTask 
            { 
                Id = 3, 
                WbsCode = "1.2", 
                Name = "Development Phase", 
                StartDate = GanttDate.FromDateTime(baseDate.AddDays(6)),
                EndDate = GanttDate.FromDateTime(baseDate.AddDays(20)),
                Duration = "14d",
                Progress = 45
            },
            new GanttTask 
            { 
                Id = 4, 
                WbsCode = "1.2.1", 
                Name = "Component Architecture", 
                StartDate = GanttDate.FromDateTime(baseDate.AddDays(6)),
                EndDate = GanttDate.FromDateTime(baseDate.AddDays(10)),
                Duration = "4d",
                Progress = 80
            },
            new GanttTask 
            { 
                Id = 5, 
                WbsCode = "1.2.2", 
                Name = "TimelineView Implementation", 
                StartDate = GanttDate.FromDateTime(baseDate.AddDays(11)),
                EndDate = GanttDate.FromDateTime(baseDate.AddDays(15)),
                Duration = "4d",
                Progress = 20
            },
            new GanttTask 
            { 
                Id = 6, 
                WbsCode = "1.3", 
                Name = "Testing Phase", 
                StartDate = GanttDate.FromDateTime(baseDate.AddDays(21)),
                EndDate = GanttDate.FromDateTime(baseDate.AddDays(30)),
                Duration = "9d",
                Progress = 0
            }
        };
    }

    private void HandleTaskSelected(int taskId)
    {
        SelectedTaskInfo = SampleTasks.FirstOrDefault(t => t.Id == taskId);
        StateHasChanged();
    }

    private void HandleScrollChanged(EventArgs e)
    {
        // Timeline scroll event handling
        // Will be used for scroll synchronization with TaskGrid later
    }

    private async Task RefreshData()
    {
        await LoadSampleData();
        SelectedTaskInfo = null;
        StateHasChanged();
    }
}

<style>
    .demo-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .demo-section {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 8px;
        background: var(--gantt-surface, #ffffff);
    }

    .timeline-container {
        height: 400px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 4px;
        overflow: hidden;
    }
    
    .zoom-controls-demo {
        border: 1px solid var(--gantt-outline-variant, #d0d0d0);
        border-radius: 8px;
        padding: 16px;
        background: var(--gantt-surface-variant, #fafafa);
    }
    
    .zoom-demo-variant {
        margin-bottom: 20px;
        padding: 16px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 6px;
        background: var(--gantt-surface, #ffffff);
    }
    
    .zoom-demo-variant h5 {
        margin: 0 0 8px 0;
        color: var(--gantt-primary, #1976d2);
        font-size: 16px;
        font-weight: 600;
    }
    
    .preset-description {
        font-size: 13px;
        color: var(--gantt-on-surface-variant, #666);
        margin: 4px 0 12px 0;
        font-style: italic;
    }
    
    /* Demo Context Styles */
    .demo-toolbar {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        background: var(--gantt-surface-variant, #f5f5f5);
        border: 1px solid var(--gantt-outline-variant, #d0d0d0);
        border-radius: 4px;
        font-size: 13px;
    }
    
    .demo-toolbar.spacious {
        gap: 16px;
        padding: 10px 16px;
    }
    
    .toolbar-item {
        padding: 4px 8px;
        color: var(--gantt-on-surface, #333);
        cursor: pointer;
        border-radius: 3px;
    }
    
    .toolbar-item:hover {
        background: var(--gantt-state-hover, rgba(0, 0, 0, 0.04));
    }
    
    .demo-control-panel {
        background: var(--gantt-surface-variant, #f8f9fa);
        border: 1px solid var(--gantt-outline-variant, #e1e5e9);
        border-radius: 6px;
        padding: 12px;
    }
    
    .panel-section {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .panel-section label {
        font-size: 13px;
        font-weight: 500;
        color: var(--gantt-on-surface, #333);
        min-width: 100px;
    }
    
    .clean-section {
        padding: 16px;
        background: var(--gantt-surface, #ffffff);
        border: 1px solid var(--gantt-outline-variant, #e8e8e8);
        border-radius: 6px;
        text-align: center;
    }
    
    .demo-status-bar {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 12px;
        background: var(--gantt-surface-variant, #f0f0f0);
        border-top: 1px solid var(--gantt-outline-variant, #d0d0d0);
        font-size: 12px;
        color: var(--gantt-on-surface-variant, #666);
        border-radius: 0 0 4px 4px;
    }
    
    .status-item {
        white-space: nowrap;
    }
    
    .debug-section {
        background: var(--gantt-surface-variant, #f9f9f9);
        border: 2px dashed var(--gantt-outline-variant, #ccc);
        border-radius: 6px;
        padding: 16px;
    }
    
    .minimal-section {
        text-align: center;
        padding: 20px;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 8px;
    }
    
    .action-section {
        background: var(--gantt-surface, #ffffff);
        border: 2px solid var(--gantt-primary, #1976d2);
        border-radius: 8px;
        padding: 20px;
        text-align: center;
    }
    
    .custom-section {
        background: var(--gantt-surface-variant, #fff8e1);
        border: 1px solid var(--gantt-primary, #ff9800);
        border-radius: 6px;
        padding: 16px;
    }
    
    .custom-note {
        display: block;
        font-size: 11px;
        color: var(--gantt-on-surface-variant, #666);
        margin-top: 8px;
        font-style: italic;
    }
    
    /* Responsive Testing Styles */
    .responsive-test {
        background: linear-gradient(45deg, #f0f8ff 0%, #e6f3ff 100%);
        border: 2px solid var(--gantt-primary, #1976d2);
    }
    
    .responsive-demo {
        display: flex;
        gap: 20px;
        margin-top: 12px;
    }
    
    .narrow-container {
        width: 300px;
        padding: 12px;
        background: var(--gantt-surface, #ffffff);
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 4px;
    }
    
    .medium-container {
        width: 600px;
        padding: 12px;
        background: var(--gantt-surface, #ffffff);
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 4px;
    }
    
    .narrow-container h6,
    .medium-container h6 {
        margin: 0 0 8px 0;
        font-size: 12px;
        color: var(--gantt-on-surface-variant, #666);
    }
    
    .timeline-controls {
        margin-bottom: 16px;
        padding: 12px;
        background: var(--gantt-surface-variant, #f8f9fa);
        border-radius: 6px;
        border: 1px solid var(--gantt-outline-variant, #e1e5e9);
    }
    
    .zoom-status {
        display: flex;
        gap: 8px;
        align-items: center;
        font-size: 12px;
    }
    
    .status-label {
        color: var(--gantt-on-surface-variant, #666);
        font-weight: 500;
    }
    
    .status-value {
        color: var(--gantt-primary, #1976d2);
        font-weight: 600;
        font-family: monospace;
    }

    .task-info {
        background: var(--gantt-surface-variant, #f5f5f5);
        padding: 16px;
        border-radius: 4px;
        font-family: monospace;
    }

    .task-info p {
        margin: 4px 0;
    }

    .demo-actions {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

    .btn-primary {
        background: var(--gantt-primary, #1976d2);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary:hover {
        background: var(--gantt-primary-dark, #1565c0);
    }

    .btn-secondary {
        background: var(--gantt-surface-variant, #f5f5f5);
        color: var(--gantt-on-surface, #000000);
        border: 1px solid var(--gantt-outline, #e0e0e0);
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-secondary:hover {
        background: var(--gantt-state-hover, rgba(0, 0, 0, 0.04));
    }
</style>
