@page "/timeline-demo"
@using GanttComponents.Models
@using GanttComponents.Models.ValueObjects
@using GanttComponents.Models.Filtering
@using GanttComponents.Components.TimelineView
@using GanttComponents.Components.TimelineZoomControls
@using GanttComponents.Components.TaskFilter
@using GanttComponents.Services
@inject IGanttTaskService TaskService
@inject IGanttI18N I18N
@inject IUniversalLogger Logger

<PageTitle>Timeline Demo</PageTitle>

<h1>Timeline Demo</h1>
<p>Demo showcasing TimelineView with tiny task markers and task filtering.</p>

<div class="demo-container">
    <!-- Task Filter -->
    <div class="demo-section">
        <h3>üéõÔ∏è Task Filter</h3>
        <TaskFilter FilterCriteria="@CurrentFilterCriteria"
                   FilterCriteriaChanged="HandleFilterCriteriaChanged"
                   OnFiltersApplied="HandleFiltersApplied"
                   InitiallyExpanded="true" />
    </div>

    <!-- Zoom Controls -->
    <div class="demo-section">
        <h3>üîç Zoom Controls</h3>
        <TimelineZoomControls CurrentZoomLevel="@CurrentZoomLevel"
                             CurrentZoomFactor="@CurrentZoomFactor"
                             OnZoomLevelChanged="HandleZoomLevelChanged"
                             OnZoomFactorChanged="HandleZoomFactorChanged"
                             ShowDayWidth="true" />
    </div>

    <!-- Timeline View -->
    <div class="demo-section">
        <h3>üìä Timeline with Tiny Task Markers</h3>
        <p>Tasks smaller than @CurrentFilterCriteria.TinyTaskPixelThreshold.ToString("F1")px width show as red asterisk (*) markers.</p>
        
        <div class="timeline-container">
            <TimelineView Tasks="@SampleTasks" 
                         ZoomLevel="@CurrentZoomLevel"
                         ZoomFactor="@CurrentZoomFactor"
                         FilterCriteria="@CurrentFilterCriteria"
                         OnZoomLevelChanged="HandleZoomLevelChanged"
                         OnZoomFactorChanged="HandleZoomFactorChanged"
                         OnTaskSelected="HandleTaskSelected" 
                         OnScrollChanged="HandleScrollChanged"
                         RowHeight="32"
                         HeaderMonthHeight="32"
                         HeaderDayHeight="24" />
        </div>
    </div>

    <!-- Selected Task Info -->
    @if (SelectedTaskInfo != null)
    {
        <div class="demo-section">
            <h3>üìã Selected Task</h3>
            <div class="task-info">
                <p><strong>WBS Code:</strong> @SelectedTaskInfo.WbsCode</p>
                <p><strong>Name:</strong> @SelectedTaskInfo.Name</p>
                <p><strong>Start Date:</strong> @SelectedTaskInfo.StartDate.ToString("MM/dd/yyyy")</p>
                <p><strong>End Date:</strong> @SelectedTaskInfo.EndDate.ToString("MM/dd/yyyy")</p>
                <p><strong>Duration:</strong> @SelectedTaskInfo.Duration</p>
                <p><strong>Progress:</strong> @SelectedTaskInfo.Progress%</p>
            </div>
        </div>
    }
</div>

<style>
    .demo-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .demo-section {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 8px;
        background: var(--gantt-surface, #ffffff);
    }

    .demo-section h3 {
        margin-top: 0;
        margin-bottom: 15px;
        color: var(--gantt-primary, #1976d2);
        font-size: 18px;
    }

    .template-status {
        margin-top: 10px;
        padding: 8px;
        background: var(--gantt-surface-variant, #f5f5f5);
        border-radius: 4px;
        font-family: var(--gantt-monospace-font, 'Consolas', 'Monaco', 'Courier New', monospace);
    }

    .timeline-container {
        margin-top: 15px;
        height: 400px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 4px;
        overflow: hidden;
    }

    .task-info {
        background: var(--gantt-surface-variant, #f5f5f5);
        padding: 15px;
        border-radius: 4px;
        font-family: var(--gantt-monospace-font, 'Consolas', 'Monaco', 'Courier New', monospace);
    }

    .task-info p {
        margin: 5px 0;
    }

    .task-info strong {
        color: var(--gantt-primary, #1976d2);
        min-width: 100px;
        display: inline-block;
    }
</style>

@code {
    private List<GanttTask> SampleTasks { get; set; } = new();
    private GanttTask? SelectedTaskInfo { get; set; }
    
    // State properties
    private TimelineZoomLevel CurrentZoomLevel { get; set; } = TimelineZoomLevel.MonthWeek;
    private double CurrentZoomFactor { get; set; } = 1.0;
    private TaskFilterCriteria CurrentFilterCriteria { get; set; } = new();
    
    // Calculated properties
    private double EffectiveDayWidth => TimelineZoomService.GetConfiguration(CurrentZoomLevel).GetEffectiveDayWidth(CurrentZoomFactor);

    protected override async Task OnInitializedAsync()
    {
        await LoadSampleData();
    }
    
    // Event handlers
    private async Task HandleZoomLevelChanged(TimelineZoomLevel newLevel)
    {
        Logger.LogOperation("TIMELINE_DEMO", $"Zoom level changed: {CurrentZoomLevel} -> {newLevel}");
        CurrentZoomLevel = newLevel;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task HandleZoomFactorChanged(double newFactor)
    {
        Logger.LogOperation("TIMELINE_DEMO", $"Zoom factor changed: {CurrentZoomFactor} -> {newFactor}");
        CurrentZoomFactor = newFactor;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleFilterCriteriaChanged(TaskFilterCriteria newCriteria)
    {
        Logger.LogOperation("TIMELINE_DEMO", "Filter criteria updated");
        CurrentFilterCriteria = newCriteria;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleFiltersApplied(TaskFilterCriteria appliedCriteria)
    {
        Logger.LogOperation("TIMELINE_DEMO", "Filters applied to timeline");
        // In a real implementation, we would filter the SampleTasks here
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleTaskSelected(int taskId)
    {
        SelectedTaskInfo = SampleTasks.FirstOrDefault(t => t.Id == taskId);
        Logger.LogOperation("TIMELINE_DEMO", $"Task selected: {taskId}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleScrollChanged(EventArgs args)
    {
        // Handle scroll position changes if needed
        await Task.CompletedTask;
    }

    private async Task LoadSampleData()
    {
        try
        {
            SampleTasks = await TaskService.GetAllTasksAsync();
            
            // Ensure we have some sample data for demo
            if (!SampleTasks.Any())
            {
                SampleTasks = GenerateTimelineSampleData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error loading sample data", ex);
            SampleTasks = GenerateTimelineSampleData();
        }
    }

    private List<GanttTask> GenerateTimelineSampleData()
    {
        var baseDate = DateTime.Today;
        
        return new List<GanttTask>
        {
            new() { Id = 1, WbsCode = "1", Name = "Project Planning", StartDate = GanttDate.FromDateTime(baseDate), EndDate = GanttDate.FromDateTime(baseDate.AddDays(5)), Duration = "5d", Progress = 100 },
            new() { Id = 2, WbsCode = "2", Name = "Design Phase", StartDate = GanttDate.FromDateTime(baseDate.AddDays(3)), EndDate = GanttDate.FromDateTime(baseDate.AddDays(8)), Duration = "5d", Progress = 80 },
            new() { Id = 3, WbsCode = "3", Name = "Quick Review", StartDate = GanttDate.FromDateTime(baseDate.AddDays(6)), EndDate = GanttDate.FromDateTime(baseDate.AddDays(6)), Duration = "1d", Progress = 50 },
            new() { Id = 4, WbsCode = "4", Name = "Implementation", StartDate = GanttDate.FromDateTime(baseDate.AddDays(7)), EndDate = GanttDate.FromDateTime(baseDate.AddDays(20)), Duration = "13d", Progress = 30 },
            new() { Id = 5, WbsCode = "5", Name = "Testing", StartDate = GanttDate.FromDateTime(baseDate.AddDays(18)), EndDate = GanttDate.FromDateTime(baseDate.AddDays(25)), Duration = "7d", Progress = 0 },
            new() { Id = 6, WbsCode = "6", Name = "Deployment", StartDate = GanttDate.FromDateTime(baseDate.AddDays(24)), EndDate = GanttDate.FromDateTime(baseDate.AddDays(26)), Duration = "2d", Progress = 0 }
        };
    }
}
