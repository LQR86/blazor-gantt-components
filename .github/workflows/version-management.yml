name: Version Management
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write  # Required for creating tags
  pull-requests: read

jobs:
  branch-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Validate Branch Naming Convention
        run: |
          echo "üîç Validating branch naming convention: ${{ github.head_ref }}"
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Define allowed branch prefixes and their purposes
          MILESTONE_PATTERN="^feat/v[0-9]+\.[0-9]+\.[0-9]+[^/]*-.*"
          FIX_PATTERN="^fix/[a-z0-9-]+$"
          HOTFIX_PATTERN="^hotfix/[a-z0-9-]+$"
          DOCS_PATTERN="^docs/[a-z0-9-]+$"
          CHORE_PATTERN="^chore/[a-z0-9-]+$"
          CI_PATTERN="^ci/[a-z0-9-]+$"
          STYLE_PATTERN="^style/[a-z0-9-]+$"
          REFACTOR_PATTERN="^refactor/[a-z0-9-]+$"
          TEST_PATTERN="^test/[a-z0-9-]+$"
          PERF_PATTERN="^perf/[a-z0-9-]+$"
          
          # Check if branch matches any allowed pattern
          if [[ "$BRANCH_NAME" =~ $MILESTONE_PATTERN ]]; then
            echo "‚úÖ Valid milestone feature branch: $BRANCH_NAME"
            echo "branch-type=milestone" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $FIX_PATTERN ]]; then
            echo "‚úÖ Valid fix branch: $BRANCH_NAME"
            echo "branch-type=fix" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $HOTFIX_PATTERN ]]; then
            echo "‚úÖ Valid hotfix branch: $BRANCH_NAME"
            echo "branch-type=hotfix" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $DOCS_PATTERN ]]; then
            echo "‚úÖ Valid documentation branch: $BRANCH_NAME"
            echo "branch-type=docs" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $CHORE_PATTERN ]]; then
            echo "‚úÖ Valid chore branch: $BRANCH_NAME"
            echo "branch-type=chore" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $CI_PATTERN ]]; then
            echo "‚úÖ Valid CI branch: $BRANCH_NAME"
            echo "branch-type=ci" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $STYLE_PATTERN ]]; then
            echo "‚úÖ Valid style branch: $BRANCH_NAME"
            echo "branch-type=style" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $REFACTOR_PATTERN ]]; then
            echo "‚úÖ Valid refactor branch: $BRANCH_NAME"
            echo "branch-type=refactor" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $TEST_PATTERN ]]; then
            echo "‚úÖ Valid test branch: $BRANCH_NAME"
            echo "branch-type=test" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ $PERF_PATTERN ]]; then
            echo "‚úÖ Valid performance branch: $BRANCH_NAME"
            echo "branch-type=perf" >> $GITHUB_ENV
          else
            echo "‚ùå Invalid branch naming convention: $BRANCH_NAME"
            echo ""
            echo "üìã Allowed branch naming patterns:"
            echo "   feat/v0.3.0-alpha-component-name  (milestone features)"
            echo "   fix/timeline-scrolling-bug        (bug fixes)"
            echo "   hotfix/critical-security-patch    (urgent fixes)"
            echo "   docs/update-readme                (documentation)"
            echo "   chore/update-dependencies          (maintenance)"
            echo "   ci/fix-build-pipeline              (CI/CD changes)"
            echo "   style/format-components            (code formatting)"
            echo "   refactor/cleanup-services          (code refactoring)"
            echo "   test/add-unit-tests                (testing)"
            echo "   perf/optimize-rendering            (performance)"
            echo ""
            echo "‚ÑπÔ∏è  Branch names must use lowercase letters, numbers, and hyphens only"
            exit 1
          fi

  pr-title-validation:
    runs-on: ubuntu-latest
    needs: branch-validation
    if: github.event_name == 'pull_request'
    steps:
      - name: Validate PR Title Format
        run: |
          echo "üîç Validating PR title format for branch: ${{ github.head_ref }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Check if this is a milestone feature branch
          if [[ "$BRANCH_NAME" =~ ^feat/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "üìã Milestone feature branch detected - version tag required in PR title"
            
            # Extract version from branch name (including alpha/beta suffixes)
            EXPECTED_VERSION=$(echo "$BRANCH_NAME" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*-[^-]*' | head -1)
            if [[ -z "$EXPECTED_VERSION" ]]; then
              EXPECTED_VERSION=$(echo "$BRANCH_NAME" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*')
            fi
            
            # Check if PR title contains the version tag
            if [[ "$PR_TITLE" =~ \($EXPECTED_VERSION\) ]]; then
              echo "‚úÖ PR title correctly includes version tag: $EXPECTED_VERSION"
            else
              echo "‚ùå PR title must include version tag for milestone branch"
              echo "   Current title: $PR_TITLE"
              echo "   Required format: feat: Complete Component Name ($EXPECTED_VERSION)"
              echo "   Example: feat: Complete GanttComposer Component ($EXPECTED_VERSION)"
              exit 1
            fi
          else
            echo "üìã Non-milestone branch detected - no version tag required"
            
            # Check that non-milestone branches don't have version tags
            if [[ "$PR_TITLE" =~ \(v[0-9]+\.[0-9]+\.[0-9]+.*\) ]]; then
              echo "‚ùå Non-milestone PR title should NOT include version tag"
              echo "   Current title: $PR_TITLE"
              echo "   Branch type: $BRANCH_NAME"
              echo "   Correct format: fix: description of fix"
              exit 1
            else
              echo "‚úÖ PR title correctly excludes version tag for non-milestone branch"
            fi
          fi

  version-check:
    runs-on: ubuntu-latest
    needs: branch-validation
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feat/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check Version Update Required
        id: version-check
        run: |
          # Get current version from version.json
          CURRENT_VERSION=$(jq -r '.version' version.json)
          CURRENT_MILESTONE=$(jq -r '.milestone' version.json)
          
          # Check if this is a milestone PR (feature/ branch with milestone change)
          if [[ "${{ github.head_ref }}" =~ ^feat/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Milestone PR detected"
            # Extract expected version from branch name (including alpha/beta suffixes)
            EXPECTED_VERSION=$(echo "${{ github.head_ref }}" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*-[^-]*' | head -1)
            if [[ -z "$EXPECTED_VERSION" ]]; then
              EXPECTED_VERSION=$(echo "${{ github.head_ref }}" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*[^-]*')
            fi
            EXPECTED_VERSION=$(echo "$EXPECTED_VERSION" | sed 's/v//')
            
            # Validate version was updated
            if [[ "$CURRENT_VERSION" != "$EXPECTED_VERSION"* ]]; then
              echo "‚ùå Version in version.json must be updated to $EXPECTED_VERSION for milestone PR"
              exit 1
            fi
            echo "‚úÖ Version correctly updated for milestone"
          fi
          
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "current-milestone=$CURRENT_MILESTONE" >> $GITHUB_OUTPUT

  auto-tag:
    runs-on: ubuntu-latest
    needs: version-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-create Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(jq -r '.version' version.json)
          MILESTONE=$(jq -r '.milestone' version.json)
          PHASE=$(jq -r '.phase' version.json)
          
          # Check if tag already exists
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "Tag v$VERSION already exists"
          else
            echo "Creating tag v$VERSION"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag -a "v$VERSION" -m "Milestone $MILESTONE: $PHASE"
            git push origin "v$VERSION"
          fi

  simple-milestone-check:
    runs-on: ubuntu-latest
    needs: branch-validation
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feat/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Simple Milestone Validation
        run: |
          echo "üéØ Simple milestone validation for ${{ github.head_ref }}"
          
          # Just check that version.json exists and has reasonable content
          if [[ ! -f "version.json" ]]; then
            echo "‚ùå version.json file missing"
            exit 1
          fi
          
          VERSION=$(jq -r '.version' version.json 2>/dev/null || echo "invalid")
          MILESTONE=$(jq -r '.milestone' version.json 2>/dev/null || echo "invalid")
          
          if [[ "$VERSION" == "invalid" || "$VERSION" == "null" ]]; then
            echo "‚ùå Invalid version in version.json"
            exit 1
          fi
          
          if [[ "$MILESTONE" == "invalid" || "$MILESTONE" == "null" ]]; then
            echo "‚ùå Invalid milestone in version.json"
            exit 1
          fi
          
          echo "‚úÖ Milestone validation passed:"
          echo "   Version: $VERSION"
          echo "   Milestone: $MILESTONE"
          echo "   Build and test will validate the actual implementation"
