name: Feature Development

on:
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'fix/**'
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # Quick validation for feature branches
  quick-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore & Build
      run: |
        dotnet restore
        dotnet build --configuration Debug --no-restore
    
    - name: Fast tests
      run: dotnet test --configuration Debug --no-build --verbosity minimal

  # Component-specific testing
  component-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [TaskGrid, TimelineView, GanttComposer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Validate ${{ matrix.component }} component
      run: |
        echo "🧪 Testing ${{ matrix.component }} component"
        
        # Check if component files exist
        if [ -f "Components/${{ matrix.component }}/${{ matrix.component }}.razor" ]; then
          echo "✅ Component file found"
        else
          echo "⚠️ Component file not found (may be in development)"
        fi
        
        # Run component-specific build
        dotnet build --configuration Debug
        
        echo "📋 Component validation completed for ${{ matrix.component }}"

  # Development phase tracking
  phase-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check development phase
      run: |
        echo "📈 Development Phase Validation"
        echo "Current branch: ${{ github.ref_name }}"
        
        echo ""
        echo "🏗️ Phase 1.1 Features (TaskGrid):"
        if [ -f "Components/TaskGrid/TaskGrid.razor" ]; then
          echo "  ✅ TaskGrid with tree structure"
        else
          echo "  ❌ TaskGrid with tree structure"
        fi
        
        if [ -f "Models/GanttTask.cs" ]; then
          echo "  ✅ Data models"
        else
          echo "  ❌ Data models"
        fi
        
        if [ -f "Services/GanttRowAlignmentService.cs" ]; then
          echo "  ✅ Row alignment service"
        else
          echo "  ❌ Row alignment service"
        fi
        
        if [ -f "Pages/GanttDemo.razor" ]; then
          echo "  ✅ Demo page"
        else
          echo "  ❌ Demo page"
        fi
        
        echo ""
        echo "🏗️ Phase 1.2 Features (TimelineView):"
        if [ -f "Components/TimelineView/TimelineView.razor" ]; then
          echo "  ✅ TimelineView component"
        else
          echo "  🔄 TimelineView component (planned)"
        fi
        
        if [ -f "Components/TimelineView/TimelineView.razor.css" ]; then
          echo "  ✅ Timeline styling"
        else
          echo "  🔄 Timeline styling (planned)"
        fi
        
        echo ""
        echo "🏗️ Phase 1.3 Features (Integration):"
        if [ -f "Components/GanttComposer/GanttComposer.razor" ]; then
          echo "  ✅ Integration component"
        else
          echo "  📋 Integration component (planned)"
        fi

  # PR readiness check
  pr-readiness:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: PR Readiness Check
      run: |
        echo "🔍 Pull Request Readiness Check"
        echo "PR: ${{ github.event.pull_request.title }}"
        echo "Author: ${{ github.event.pull_request.user.login }}"
        echo "Base: ${{ github.event.pull_request.base.ref }}"
        echo "Head: ${{ github.event.pull_request.head.ref }}"
        
        echo ""
        echo "📋 Required Files Check:"
        if [ -f "README.md" ]; then
          echo "  ✅ README.md"
        else
          echo "  ❌ README.md (missing)"
        fi
        
        if [ -f "basic_gantt_plan.md" ]; then
          echo "  ✅ basic_gantt_plan.md"
        else
          echo "  ❌ basic_gantt_plan.md (missing)"
        fi
        
        if [ -f ".github/copilot-instructions.md" ]; then
          echo "  ✅ .github/copilot-instructions.md"
        else
          echo "  ❌ .github/copilot-instructions.md (missing)"
        fi
        
        # Check commit message format
        echo ""
        echo "💬 Recent Commits:"
        git log --oneline -5

  # Auto-labeling for PRs (disabled due to label creation permissions)
  # auto-label:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   
  #   - name: Auto-label PR
  #     uses: actions/labeler@v5
  #     with:
  #       repo-token: ${{ secrets.GITHUB_TOKEN }}
  #       configuration-path: .github/labeler.yml
  #       sync-labels: false

  # Development metrics
  dev-metrics:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Development Metrics
      run: |
        echo "📊 Development Metrics"
        echo "======================"
        
        # Count lines of code by type
        echo "📝 Lines of Code:"
        echo "  C# files: $(find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" | xargs wc -l | tail -1 | awk '{print $1}')"
        echo "  Razor files: $(find . -name "*.razor" -not -path "./bin/*" -not -path "./obj/*" | xargs wc -l | tail -1 | awk '{print $1}')"
        echo "  CSS files: $(find . -name "*.css" -not -path "./bin/*" -not -path "./obj/*" -not -path "./wwwroot/css/bootstrap/*" -not -path "./wwwroot/css/open-iconic/*" | xargs wc -l | tail -1 | awk '{print $1}')"
        
        echo ""
        echo "🏗️ Component Progress:"
        echo "  TaskGrid: $([ -f "Components/TaskGrid/TaskGrid.razor" ] && echo "✅ Implemented" || echo "❌ Pending")"
        echo "  TimelineView: $([ -f "Components/TimelineView/TimelineView.razor" ] && echo "✅ Implemented" || echo "🔄 In Progress")"
        echo "  GanttComposer: $([ -f "Components/GanttComposer/GanttComposer.razor" ] && echo "✅ Implemented" || echo "📋 Planned")"
        
        echo ""
        echo "📦 Dependencies:"
        if [ -f "GanttComponents.csproj" ]; then
          echo "  NuGet packages: $(grep -c 'PackageReference' GanttComponents.csproj || echo "0")"
        fi
