@using GanttComponents.Models
@using GanttComponents.Services
@using Microsoft.AspNetCore.Components
@using System.Reflection
@inject IGanttI18N I18N
@inject IUniversalLogger Logger
@implements IDisposable

<div class="timeline-zoom-controls @GetEffectiveCssClass()" style="@Style">
    @if (EffectiveConfig.ShowLevelPresets)
    {
        @if (EffectiveConfig.UseDropdownForPresets)
        {
            <div class="zoom-level-dropdown">
                @if (EffectiveConfig.ShowLabels)
                {
                    <span class="zoom-controls-label">@I18N.T("ZoomControls.ZoomLevel")</span>
                }
                <select class="zoom-preset-dropdown" 
                        value="@CurrentZoomLevel" 
                        disabled="@Disabled"
                        @onchange="OnDropdownLevelSelected">
                    @foreach (var level in GetVisibleZoomLevels())
                    {
                        var config = TimelineZoomService.GetConfiguration(level);
                        <option value="@level" title="@I18N.T(config.DescriptionKey)">
                            @I18N.T(config.DisplayNameKey)
                        </option>
                    }
                </select>
            </div>
        }
        else
        {
            <div class="zoom-level-presets">
                @if (EffectiveConfig.ShowLabels)
                {
                    <span class="zoom-controls-label">@I18N.T("ZoomControls.ZoomLevel")</span>
                }
                
                @foreach (var level in GetVisibleZoomLevels())
                {
                    var config = TimelineZoomService.GetConfiguration(level);
                    var isActive = level == CurrentZoomLevel;
                    var buttonClass = $"zoom-preset-button {(isActive ? "active" : "")}";
                    
                    <button type="button" 
                            class="@buttonClass" 
                            disabled="@(isActive || Disabled)"
                            title="@I18N.T(config.DescriptionKey)"
                            @onclick="() => OnZoomLevelSelected(level)">
                        @I18N.T(config.DisplayNameKey)
                    </button>
                }
            </div>
        }
    }
    
    @if (EffectiveConfig.ShowCurrentState && !EffectiveConfig.HideCurrentState)
    {
        <div class="zoom-current-state">
            @if (EffectiveConfig.ShowLabels)
            {
                <span class="zoom-controls-label">@I18N.T("ZoomControls.Current")</span>
            }
            
            <div class="zoom-current-display">
                <span class="zoom-level-name">@I18N.T(TimelineZoomService.GetConfiguration(CurrentZoomLevel).DisplayNameKey)</span>
                @if (EffectiveConfig.ShowZoomFactor)
                {
                    <span class="zoom-factor-display">@($"{CurrentZoomFactor:P0}")</span>
                }
                @if (EffectiveConfig.ShowDayWidth)
                {
                    <span class="zoom-day-width">@($"{CurrentDayWidth:F0}px")</span>
                }
            </div>
        </div>
    }
    
    @if (EffectiveConfig.ShowQuickActions)
    {
        <div class="zoom-quick-actions">
            @if (EffectiveConfig.ShowLabels)
            {
                <span class="zoom-controls-label">@I18N.T("ZoomControls.QuickActions")</span>
            }
            
            <div class="zoom-action-buttons">
                <button type="button" 
                        class="zoom-action-button zoom-in" 
                        disabled="@(Disabled || IsAtMaxZoom())"
                        title="@I18N.T("ZoomControls.ZoomIn")"
                        @onclick="OnZoomIn">
                    <span class="zoom-icon">+</span>
                    @if (EffectiveConfig.ShowActionLabels)
                    {
                        <span class="zoom-action-text">@I18N.T("ZoomControls.ZoomIn")</span>
                    }
                </button>
                
                <button type="button" 
                        class="zoom-action-button zoom-out" 
                        disabled="@(Disabled || IsAtMinZoom())"
                        title="@I18N.T("ZoomControls.ZoomOut")"
                        @onclick="OnZoomOut">
                    <span class="zoom-icon">âˆ’</span>
                    @if (EffectiveConfig.ShowActionLabels)
                    {
                        <span class="zoom-action-text">@I18N.T("ZoomControls.ZoomOut")</span>
                    }
                </button>
            </div>
        </div>
    }
    
    @if (AdditionalContent != null)
    {
        <div class="zoom-additional-content">
            @AdditionalContent
        </div>
    }
</div>

@code {
    // Core zoom state - REQUIRED
    [Parameter, EditorRequired] public TimelineZoomLevel CurrentZoomLevel { get; set; }
    [Parameter, EditorRequired] public double CurrentZoomFactor { get; set; } = 1.0;
    [Parameter, EditorRequired] public EventCallback<TimelineZoomLevel> OnZoomLevelChanged { get; set; }
    [Parameter, EditorRequired] public EventCallback<double> OnZoomFactorChanged { get; set; }
    
    // NEW: Preset configuration system - choose a preset or use Custom for individual control
    [Parameter] public TimelineZoomControlPreset Preset { get; set; } = TimelineZoomControlPreset.Default;
    
    // Composability and customization
    [Parameter] public RenderFragment? AdditionalContent { get; set; }
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Style { get; set; } = "";
    [Parameter] public bool Disabled { get; set; } = false;
    
    // UI configuration - used when Preset = Custom, otherwise ignored
    [Parameter] public bool ShowLevelPresets { get; set; } = true;
    [Parameter] public bool ShowCurrentState { get; set; } = true;
    [Parameter] public bool ShowQuickActions { get; set; } = true;
    [Parameter] public bool ShowLabels { get; set; } = true;
    [Parameter] public bool ShowActionLabels { get; set; } = false; // Icons only by default
    [Parameter] public bool ShowZoomFactor { get; set; } = true;
    [Parameter] public bool ShowDayWidth { get; set; } = false; // Developer feature
    [Parameter] public bool HideCurrentState { get; set; } = false;
    
    // Zoom level filtering - for different use cases  
    [Parameter] public IReadOnlyList<TimelineZoomLevel>? VisibleZoomLevels { get; set; }
    [Parameter] public TimelineZoomLevel MinZoomLevel { get; set; } = TimelineZoomLevel.YearQuarterOptimal30px;  // Most zoomed out (overview) - NEW OPTIMAL
        [Parameter] public TimelineZoomLevel MaxZoomLevel { get; set; } = TimelineZoomLevel.WeekDayOptimal60px;      // Most zoomed in (detail) - 4-4-4-4 structure
    
    // Preset-only approach: Manual zoom controls removed for v0.8.5
    // All zoom control is handled via preset level selection only
    
    // Effective configuration based on preset or custom parameters
    private TimelineZoomControlConfiguration EffectiveConfig
    {
        get
        {
            if (Preset == TimelineZoomControlPreset.Custom)
            {
                // Use individual parameters when Custom preset is selected
                return new TimelineZoomControlConfiguration
                {
                    ShowLevelPresets = ShowLevelPresets,
                    ShowCurrentState = ShowCurrentState,
                    ShowQuickActions = ShowQuickActions,
                    ShowLabels = ShowLabels,
                    ShowActionLabels = ShowActionLabels,
                    ShowZoomFactor = ShowZoomFactor,
                    ShowDayWidth = ShowDayWidth,
                    HideCurrentState = HideCurrentState,
                    CssClass = CssClass,
                    UseDropdownForPresets = false, // Can be added as parameter if needed
                    MaxVisiblePresets = 16  // Updated for 16-level optimal system
                };
            }
            else
            {
                // Use predefined preset configuration
                return TimelineZoomControlConfiguration.GetPresetConfiguration(Preset);
            }
        }
    }
    
    // Calculated properties
    private double CurrentDayWidth => TimelineZoomService.GetConfiguration(CurrentZoomLevel).GetEffectiveDayWidth(CurrentZoomFactor);
    
    // Get effective CSS class combining preset and custom classes
    private string GetEffectiveCssClass()
    {
        var effectiveClass = EffectiveConfig.CssClass;
        if (!string.IsNullOrWhiteSpace(CssClass))
        {
            effectiveClass = string.IsNullOrWhiteSpace(effectiveClass) ? CssClass : $"{effectiveClass} {CssClass}";
        }
        return effectiveClass;
    }
    
    // Get visible zoom levels based on configuration
    private IEnumerable<TimelineZoomLevel> GetVisibleZoomLevels()
    {
        if (VisibleZoomLevels != null && VisibleZoomLevels.Count > 0)
        {
            return VisibleZoomLevels;
        }
        
        // Get all zoom levels and filter out obsolete ones by default
        var allLevels = Enum.GetValues<TimelineZoomLevel>()
            .Where(level => !IsObsoleteZoomLevel(level))  // Filter out obsolete levels
            .OrderBy(x => (int)x);
        
        // Use min/max range - 4-4-4-4: YearQuarterOptimal30px=20 (overview) to WeekDayOptimal60px=35 (detail)
        var filteredLevels = allLevels.Where(level => (int)level >= (int)MinZoomLevel && (int)level <= (int)MaxZoomLevel).ToList();
        
        // Apply preset limit for visible presets
        if (EffectiveConfig.MaxVisiblePresets > 0 && filteredLevels.Count > EffectiveConfig.MaxVisiblePresets)
        {
            // Take evenly distributed levels across the range
            var step = (double)filteredLevels.Count / EffectiveConfig.MaxVisiblePresets;
            var selectedLevels = new List<TimelineZoomLevel>();
            for (int i = 0; i < EffectiveConfig.MaxVisiblePresets; i++)
            {
                var index = (int)(i * step);
                if (index < filteredLevels.Count)
                {
                    selectedLevels.Add(filteredLevels[index]);
                }
            }
            return selectedLevels;
        }
        
        return filteredLevels;
    }
    
    // Helper method to check if a zoom level is obsolete
    private bool IsObsoleteZoomLevel(TimelineZoomLevel level)
    {
        // Check if the enum value is marked with ObsoleteAttribute
        var field = typeof(TimelineZoomLevel).GetField(level.ToString());
        return field?.GetCustomAttributes(typeof(ObsoleteAttribute), false).Length > 0;
    }
    
    // Component lifecycle - reactive i18n support
    protected override void OnInitialized()
    {
        Logger.LogComponentLifecycle("TimelineZoomControls", "OnInitialized - Reactive i18n enabled", new { 
            CurrentZoomLevel, Preset, MinZoomLevel, MaxZoomLevel
        });
        
        // Subscribe to language changes to force re-render when locale changes
        I18N.LanguageChanged += OnLanguageChangedFromService;
    }
    
    private void OnLanguageChangedFromService()
    {
        // Force re-render when language changes to update localized zoom level names
        Logger.LogComponentLifecycle("TimelineZoomControls", "Language changed - forcing re-render", null);
        InvokeAsync(StateHasChanged);
    }
    
    // Event handlers
    private async Task OnZoomLevelSelected(TimelineZoomLevel level)
    {
        Logger.LogOperation("ZOOM_CONTROLS", $"ZoomLevelSelected: {level} (current: {CurrentZoomLevel})");
        
        if (level != CurrentZoomLevel && OnZoomLevelChanged.HasDelegate)
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"Invoking OnZoomLevelChanged: {CurrentZoomLevel} -> {level}");
            await OnZoomLevelChanged.InvokeAsync(level);
        }
        else
        {
            Logger.LogWarning("ZoomLevelSelected ignored", new { level, CurrentZoomLevel, HasDelegate = OnZoomLevelChanged.HasDelegate });
        }
    }
    
    private async Task OnDropdownLevelSelected(ChangeEventArgs e)
    {
        if (e.Value != null && Enum.TryParse<TimelineZoomLevel>(e.Value.ToString(), out var level))
        {
            Logger.LogOperation("ZOOM_CONTROLS", $"DropdownZoomLevelSelected: {level}");
            await OnZoomLevelSelected(level);
        }
    }
    
    private async Task OnZoomIn()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomIn button clicked");
        
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var currentIndex = levels.IndexOf(CurrentZoomLevel);
        
        if (currentIndex < levels.Count - 1) // Can zoom in (higher detail = higher enum value)
        {
            var newLevel = levels[currentIndex + 1];
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomIn: {CurrentZoomLevel} -> {newLevel}");
            await OnZoomLevelSelected(newLevel);
        }
        else
        {
            Logger.LogWarning("Cannot zoom in - already at maximum zoom", new { CurrentZoomLevel, currentIndex });
        }
    }
    
    private async Task OnZoomOut()
    {
        Logger.LogOperation("ZOOM_CONTROLS", "ZoomOut button clicked");
        
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var currentIndex = levels.IndexOf(CurrentZoomLevel);
        
        if (currentIndex > 0) // Can zoom out (lower detail = lower enum value)
        {
            var newLevel = levels[currentIndex - 1];
            Logger.LogOperation("ZOOM_CONTROLS", $"ZoomOut: {CurrentZoomLevel} -> {newLevel}");
            await OnZoomLevelSelected(newLevel);
        }
        else
        {
            Logger.LogWarning("Cannot zoom out - already at minimum zoom", new { CurrentZoomLevel, currentIndex });
        }
    }
    
    // State checks
    private bool IsAtMaxZoom()
    {
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var result = levels.Count > 0 && CurrentZoomLevel == levels.Last(); // Maximum zoom = highest enum value (most detail)
        return result;
    }
    
    private bool IsAtMinZoom()
    {
        var levels = GetVisibleZoomLevels().OrderBy(x => (int)x).ToList();
        var result = levels.Count > 0 && CurrentZoomLevel == levels.First(); // Minimum zoom = lowest enum value (least detail)
        return result;
    }
    
    public void Dispose()
    {
        // Unsubscribe from language changes to prevent memory leaks
        I18N.LanguageChanged -= OnLanguageChangedFromService;
    }
}
