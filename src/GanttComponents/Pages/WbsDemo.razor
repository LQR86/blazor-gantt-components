@page "/wbs-demo"
@using GanttComponents.Models
@using GanttComponents.Services
@inject IGanttTaskService TaskService
@inject IWbsCodeGenerationService WbsService
@inject IUniversalLogger Logger

<PageTitle>WBS Generation Demo</PageTitle>

<h1>WBS Code Generation Service Demo</h1>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>WBS Operations</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary mb-2" @onclick="RegenerateAllWbsCodes">
                        🔄 Regenerate All WBS Codes
                    </button>
                    <br />
                    <button class="btn btn-warning mb-2" @onclick="ValidateWbsHierarchy">
                        ✅ Validate WBS Hierarchy
                    </button>
                    <br />
                    <button class="btn btn-info mb-2" @onclick="GetNextAvailableCode">
                        ➕ Get Next Available WBS Code
                    </button>
                    
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-info mt-3">
                            @statusMessage
                        </div>
                    }
                    
                    @if (validationErrors?.Any() == true)
                    {
                        <div class="alert alert-danger mt-3">
                            <h6>Validation Errors:</h6>
                            <ul>
                                @foreach (var error in validationErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Current Tasks with WBS Codes</h5>
                </div>
                <div class="card-body">
                    @if (tasks?.Any() == true)
                    {
                        <div style="max-height: 400px; overflow-y: auto;">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>WBS Code</th>
                                        <th>Task Name</th>
                                        <th>Parent</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in tasks.OrderBy(t => t.WbsCode))
                                    {
                                        <tr>
                                            <td><strong>@task.WbsCode</strong></td>
                                            <td>@task.Name</td>
                                            <td>@(GetParentWbsCode(task))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p>No tasks found.</p>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>WBS Hierarchy Visualization</h5>
                </div>
                <div class="card-body">
                    @if (tasks?.Any() == true)
                    {
                        <div class="wbs-hierarchy">
                            @foreach (var rootTask in GetRootTasks())
                            {
                                @RenderTaskHierarchy(rootTask, 0)
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GanttTask>? tasks;
    private List<string>? validationErrors;
    private string? statusMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            isLoading = true;
            statusMessage = null;
            validationErrors = null;
            StateHasChanged();

            tasks = await TaskService.GetAllTasksAsync();
            
            Logger.LogOperation("WBS Demo", "Loaded tasks for demonstration", new { TaskCount = tasks.Count });
        }
        catch (Exception ex)
        {
            Logger.LogError("Error loading tasks for WBS demo", ex);
            statusMessage = $"Error loading tasks: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RegenerateAllWbsCodes()
    {
        try
        {
            statusMessage = "Regenerating WBS codes...";
            StateHasChanged();

            var updatedTasks = await TaskService.RegenerateAllWbsCodesAsync();
            tasks = updatedTasks;
            
            statusMessage = $"✅ Successfully regenerated WBS codes for {updatedTasks.Count} tasks";
            Logger.LogOperation("WBS Demo", "Regenerated all WBS codes", new { TaskCount = updatedTasks.Count });
        }
        catch (Exception ex)
        {
            Logger.LogError("Error regenerating WBS codes", ex);
            statusMessage = $"❌ Error regenerating WBS codes: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task ValidateWbsHierarchy()
    {
        try
        {
            statusMessage = "Validating WBS hierarchy...";
            StateHasChanged();

            if (tasks == null)
            {
                await LoadTasks();
            }

            validationErrors = WbsService.ValidateWbsHierarchy(tasks!);
            
            if (validationErrors.Count == 0)
            {
                statusMessage = "✅ WBS hierarchy validation passed - no errors found";
            }
            else
            {
                statusMessage = $"⚠️ WBS hierarchy validation found {validationErrors.Count} errors";
            }
            
            Logger.LogOperation("WBS Demo", "Validated WBS hierarchy", new { 
                ErrorCount = validationErrors.Count,
                Success = validationErrors.Count == 0
            });
        }
        catch (Exception ex)
        {
            Logger.LogError("Error validating WBS hierarchy", ex);
            statusMessage = $"❌ Error validating WBS hierarchy: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task GetNextAvailableCode()
    {
        try
        {
            // Get next root level code
            var nextRootCode = await TaskService.GetNextAvailableWbsCodeAsync(null);
            
            // Get next code under "1" if it exists
            var nextChildCode = await TaskService.GetNextAvailableWbsCodeAsync("1");
            
            statusMessage = $"🔢 Next available codes:\n• Root level: {nextRootCode}\n• Under '1': {nextChildCode}";
            
            Logger.LogOperation("WBS Demo", "Retrieved next available WBS codes", new { 
                NextRootCode = nextRootCode,
                NextChildCode = nextChildCode
            });
        }
        catch (Exception ex)
        {
            Logger.LogError("Error getting next available WBS codes", ex);
            statusMessage = $"❌ Error getting next available codes: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string GetParentWbsCode(GanttTask task)
    {
        if (!task.ParentId.HasValue || tasks == null)
            return "-";
            
        var parent = tasks.FirstOrDefault(t => t.Id == task.ParentId.Value);
        return parent?.WbsCode ?? "Unknown";
    }

    private List<GanttTask> GetRootTasks()
    {
        return tasks?.Where(t => !t.ParentId.HasValue).OrderBy(t => t.WbsCode).ToList() ?? new List<GanttTask>();
    }

    private List<GanttTask> GetChildTasks(int parentId)
    {
        return tasks?.Where(t => t.ParentId == parentId).OrderBy(t => t.WbsCode).ToList() ?? new List<GanttTask>();
    }

    private RenderFragment RenderTaskHierarchy(GanttTask task, int level)
    {
        return builder =>
        {
            var indent = new string('\u00A0', level * 4); // Non-breaking spaces for indentation
            var children = GetChildTasks(task.Id);
            
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "wbs-item mb-1");
            builder.AddAttribute(2, "style", $"margin-left: {level * 20}px;");
            
            builder.OpenElement(3, "span");
            builder.AddAttribute(4, "class", "badge bg-primary me-2");
            builder.AddContent(5, task.WbsCode);
            builder.CloseElement();
            
            builder.AddContent(6, task.Name);
            
            if (children.Any())
            {
                builder.OpenElement(7, "small");
                builder.AddAttribute(8, "class", "text-muted ms-2");
                builder.AddContent(9, $"({children.Count} children)");
                builder.CloseElement();
            }
            
            builder.CloseElement();
            
            // Render children
            foreach (var child in children)
            {
                builder.AddContent(10, RenderTaskHierarchy(child, level + 1));
            }
        };
    }
}

<style>
    .wbs-hierarchy {
        font-family: monospace;
        font-size: 0.9rem;
    }
    
    .wbs-item {
        padding: 2px 0;
    }
    
    .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    pre {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.375rem;
        white-space: pre-wrap;
    }
</style>
