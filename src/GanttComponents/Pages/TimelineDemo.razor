@page "/timeline-demo"
@using GanttComponents.Models
@using GanttComponents.Components.TimelineView
@using GanttComponents.Services
@inject IGanttTaskService TaskService

<PageTitle>TimelineView Demo</PageTitle>

<h1>TimelineView Component - Standalone Demo</h1>

<div class="demo-container">
    <div class="demo-section">
        <h3>Independent TimelineView Component (Milestone 1.2)</h3>
        <p>Testing TimelineView as a standalone component with its own API and data handling.</p>
        
        <div class="timeline-container">
            <TimelineView Tasks="@SampleTasks" 
                         OnTaskSelected="HandleTaskSelected" 
                         OnScrollChanged="HandleScrollChanged" />
        </div>
    </div>

    @if (SelectedTaskInfo != null)
    {
        <div class="demo-section">
            <h4>Selected Task Information</h4>
            <div class="task-info">
                <p><strong>WBS Code:</strong> @SelectedTaskInfo.WbsCode</p>
                <p><strong>Name:</strong> @SelectedTaskInfo.Name</p>
                <p><strong>Start Date:</strong> @SelectedTaskInfo.StartDate.ToString("MM/dd/yyyy")</p>
                <p><strong>End Date:</strong> @SelectedTaskInfo.EndDate.ToString("MM/dd/yyyy")</p>
                <p><strong>Duration:</strong> @SelectedTaskInfo.Duration</p>
                <p><strong>Progress:</strong> @SelectedTaskInfo.Progress%</p>
            </div>
        </div>
    }

    <div class="demo-section">
        <h4>Component Independence Validation</h4>
        <ul>
            <li>✅ <strong>Standalone Operation</strong>: TimelineView works without TaskGrid</li>
            <li>✅ <strong>Own Data Source</strong>: Independent task list and state management</li>
            <li>✅ <strong>SVG Timeline</strong>: Day-based scale (40px/day) with month/day headers</li>
            <li>✅ <strong>Task Bar Rendering</strong>: Simple rectangles with WBS code labels</li>
            <li>✅ <strong>UTC Date Handling</strong>: Day precision only, no time components</li>
            <li>✅ <strong>Row Height Consistency</strong>: 32px rows to match TaskGrid</li>
            <li>✅ <strong>Event Communication</strong>: Task selection events work independently</li>
            <li>✅ <strong>Scrolling</strong>: Horizontal and vertical scroll functionality</li>
        </ul>
    </div>

    <div class="demo-section">
        <h4>Architecture Requirements Satisfied</h4>
        <ul>
            <li>✅ <strong>REQUIREMENT 5</strong>: TimelineView component works standalone ✓</li>
            <li>✅ <strong>REQUIREMENT 6</strong>: Fixed row heights for alignment preparation ✓</li>
            <li>✅ <strong>REQUIREMENT 10</strong>: SVG-based timeline rendering ✓</li>
            <li>✅ <strong>REQUIREMENT 1</strong>: Day-level scheduling only ✓</li>
            <li>✅ <strong>REQUIREMENT 2</strong>: UTC date storage with day precision ✓</li>
            <li>✅ <strong>REQUIREMENT 12</strong>: WBS codes as task identifiers ✓</li>
        </ul>
    </div>

    <div class="demo-actions">
        <button class="btn-primary" @onclick="RefreshData">Refresh Timeline Data</button>
        <button class="btn-secondary" @onclick="() => { SelectedTaskInfo = null; StateHasChanged(); }">Clear Selection</button>
    </div>
</div>

@code {
    private List<GanttTask> SampleTasks { get; set; } = new();
    private GanttTask? SelectedTaskInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadSampleData();
    }

    private async Task LoadSampleData()
    {
        try
        {
            SampleTasks = await TaskService.GetAllTasksAsync();
            
            // Ensure we have some sample data for timeline demo
            if (!SampleTasks.Any())
            {
                SampleTasks = GenerateTimelineSampleData();
            }
        }
        catch (Exception)
        {
            // Fallback to generated data if service fails
            SampleTasks = GenerateTimelineSampleData();
        }
    }

    private List<GanttTask> GenerateTimelineSampleData()
    {
        var baseDate = DateTime.UtcNow.Date;
        
        return new List<GanttTask>
        {
            new GanttTask 
            { 
                Id = 1, 
                WbsCode = "1", 
                Name = "Timeline Demo Project", 
                StartDate = baseDate,
                EndDate = baseDate.AddDays(30),
                Duration = "30d",
                Progress = 25
            },
            new GanttTask 
            { 
                Id = 2, 
                WbsCode = "1.1", 
                Name = "Planning Phase", 
                StartDate = baseDate,
                EndDate = baseDate.AddDays(5),
                Duration = "5d",
                Progress = 100
            },
            new GanttTask 
            { 
                Id = 3, 
                WbsCode = "1.2", 
                Name = "Development Phase", 
                StartDate = baseDate.AddDays(6),
                EndDate = baseDate.AddDays(20),
                Duration = "14d",
                Progress = 45
            },
            new GanttTask 
            { 
                Id = 4, 
                WbsCode = "1.2.1", 
                Name = "Component Architecture", 
                StartDate = baseDate.AddDays(6),
                EndDate = baseDate.AddDays(10),
                Duration = "4d",
                Progress = 80
            },
            new GanttTask 
            { 
                Id = 5, 
                WbsCode = "1.2.2", 
                Name = "TimelineView Implementation", 
                StartDate = baseDate.AddDays(11),
                EndDate = baseDate.AddDays(15),
                Duration = "4d",
                Progress = 20
            },
            new GanttTask 
            { 
                Id = 6, 
                WbsCode = "1.3", 
                Name = "Testing Phase", 
                StartDate = baseDate.AddDays(21),
                EndDate = baseDate.AddDays(30),
                Duration = "9d",
                Progress = 0
            }
        };
    }

    private void HandleTaskSelected(int taskId)
    {
        SelectedTaskInfo = SampleTasks.FirstOrDefault(t => t.Id == taskId);
        StateHasChanged();
    }

    private void HandleScrollChanged(EventArgs e)
    {
        // Timeline scroll event handling
        // Will be used for scroll synchronization with TaskGrid later
    }

    private async Task RefreshData()
    {
        await LoadSampleData();
        SelectedTaskInfo = null;
        StateHasChanged();
    }
}

<style>
    .demo-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .demo-section {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 8px;
        background: var(--gantt-surface, #ffffff);
    }

    .timeline-container {
        height: 400px;
        border: 1px solid var(--gantt-outline, #e0e0e0);
        border-radius: 4px;
        overflow: hidden;
    }

    .task-info {
        background: var(--gantt-surface-variant, #f5f5f5);
        padding: 16px;
        border-radius: 4px;
        font-family: monospace;
    }

    .task-info p {
        margin: 4px 0;
    }

    .demo-actions {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

    .btn-primary {
        background: var(--gantt-primary, #1976d2);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary:hover {
        background: var(--gantt-primary-dark, #1565c0);
    }

    .btn-secondary {
        background: var(--gantt-surface-variant, #f5f5f5);
        color: var(--gantt-on-surface, #000000);
        border: 1px solid var(--gantt-outline, #e0e0e0);
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-secondary:hover {
        background: var(--gantt-state-hover, rgba(0, 0, 0, 0.04));
    }
</style>
